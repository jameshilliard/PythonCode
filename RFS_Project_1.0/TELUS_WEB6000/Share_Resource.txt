*** Settings ***
Library           SSHLibrary
Library           OperatingSystem
Library           ../library/Capture_Packets/Capture_Packets.py
Resource          GUI_Keyword.txt
Library           ../library/Wifi/Wifi.py
Library           Selenium2Library
Library           ../library/TR/TR.py

*** Keywords ***
TR_SPV
    [Arguments]    @{SPV_arg}
    ${Check_SPV}=    Do Spv On Dut    @{SPV_arg}
    Should Be True    ${Check_SPV}
    Sleep    15

TR_GPV_Check
    [Arguments]    @{GPV_arg}
    ${Check_GPV}=    Do Gpv On Dut    @{GPV_arg}
    Should Be True    ${Check_GPV}

TR_SPV_ON_GW
    [Arguments]    @{SPV_arg}
    ${Check_SPV}=    Do Spv On Gw    @{SPV_arg}
    Should Be True    ${Check_SPV}
    Sleep    15

TR_GPV_ON_GW
    [Arguments]    @{GPV_arg}
    ${Check_GPV}=    Do Gpv On Gw    @{GPV_arg}
    Should Be True    ${Check_GPV}

TR_GPV_Return_Value
    [Arguments]    ${arg1}
    ${Check_GPV}=    Do Gpv On Dut    ${arg1}
    Should Be True    ${Check_GPV}
    ${rc}=    Get GPV Result    ${arg1}
    [Return]    ${rc}

FUN_SSH_DUT
    [Arguments]    ${ssh_address}    ${username}    ${password}
    SSHLibrary.Open Connection    ${ssh_address}
    ${x}=    Run Keyword And Return Status    SSHLibrary.Login    ${username}    ${password}
    SSHLibrary.Close Connection
    Log    ==========SSH Result is ${x}==========
    connet SSID
    [Return]    ${x}

FUN_PingTest
    [Arguments]    ${destIP}    ${count}=4    ${interface}=eth1
    [Documentation]    Use Linux ping command return value should be "0", and output should not contain "100% packet loss"
    ...    Arguments: ${destIP} | ${count} | ${interface}
    ...
    ...    Usage:
    ...    PingTest | 192.168.1.254 | 4 | eth2
    ...
    ...    Arguments can be a real value or variable defined in Variables list.
    ${rc}    ${PingResult}=    Run And Return Rc And Output    ping ${destIP} -c ${count} -I ${interface}
    Should Be Equal As Numbers    ${rc}    0
    Log    ${PingResult}
    Should Not Contain    ${PingResult}    , 100% packet loss

FUN_GetIP
    [Arguments]    ${interface}=eth1
    [Documentation]    Use dhclient get IP address on identify interface, and return value should contain 'renewal', otherwise the keyword will not pass.
    ...
    ...    Example:
    ...
    ...    GetIP | ${U_CUSTOM_IF1}
    Run    dhclient -r ${interface}
    ${GetIP_Result}=    Run    dhclient -v ${interface}
    Should contain    ${GetIP_Result}    renewal

FUN_Release_IP
    [Arguments]    ${interface}=eth1
    [Documentation]    Release the IP by dhclient
    ...
    ...    Arguments: ${interface}
    ...
    ...    Example:
    ...    Release_IP | ${U_CUSTOM_IF1}
    Run    dhclient -r ${interface}

TR_SPV_SSH_Disabled
    Do Spv On Dut    Device.X_ACTIONTEC_COM_RemoteLogin.Enable =0 boolean
    Sleep    15
    ${Init_GPV}=    Do Gpv On Dut    Device.X_ACTIONTEC_COM_RemoteLogin.Enable=0
    Should Be True    ${Init_GPV}

TR_SPV_SSH_Enabled
    Do Spv On Dut    Device.X_ACTIONTEC_COM_RemoteLogin.Enable =1 boolean    Device.X_ACTIONTEC_COM_RemoteLogin.Port=22 unsignedInt    Device.X_ACTIONTEC_COM_RemoteLogin.Protocol=SSH string    Device.X_ACTIONTEC_COM_RemoteLogin.IdleTimeout=60 unsignedInt    Device.X_ACTIONTEC_COM_RemoteLogin.Username=admin string    Device.X_ACTIONTEC_COM_RemoteLogin.Password=1 string
    Sleep    15
    ${Init_GPV}=    Do Gpv On Dut    Device.X_ACTIONTEC_COM_RemoteLogin.Enable=1
    Should Be True    ${Init_GPV}

FUN_ConfigIP
    [Arguments]    ${interface}=eth1    ${address}=192.168.1.100
    ${rc}=    Run And Return Rc    ifconfig ${interface} ${address}
    Should Be Equal As Numbers    ${rc}    0
    ${rc}=    ${output}    Run And Return Rc And Output    ifconfig ${interface}
    Should Contain    ${output}    ${address}

FUN_Parse WiFi_L2 Packets
    [Arguments]    ${filter_rule}    ${positive}=True
    Start Capture On Lan    interface=mon    output=/tmp/test1.pcap
    sleep    5
    Stop Capture On Lan    raw=/tmp/test1.pcap
    Parse Packets    filter=${filter_rule}    raw=/tmp/test1.pcap    output=/tmp/filter.log    positive=${positive}
    ${rc}    ${cat_result}=    Run And Return Rc And Output    cat /tmp/filter.log
    Run Keyword If    '${positive}'=='True'    Should Not Be Empty    ${cat_result}    ELSE IF    '${positive}'=='False'    Should Be Empty
    ...    ${cat_result}

TR_SPV_WiFiRadio_Enable
    [Arguments]    ${x}=1
    Do Spv On Dut    Device.WiFi.Radio.${x}.Enable=1 boolean
    Sleep    15
    ${Init_GPV}=    Do Gpv On Dut    Device.WiFi.Radio.${x}.Enable=1
    Should Be True    ${Init_GPV}

TR_SPV_WiFiRadio_Disable
    [Arguments]    ${x}=1
    Do Spv On Dut    Device.WiFi.Radio.${x}.Enable=0 boolean
    Sleep    15
    ${Init_GPV}=    Do Gpv On Dut    Device.WiFi.Radio.${x}.Enable=0
    Should Be True    ${Init_GPV}

TR_Reboot_DUT
    ${rc}=    Reset DUT by jacs
    should be true    ${rc}

TR_SPV_WMM_Enable
    [Arguments]    ${x}=1
    Do Spv On Dut    Device.WiFi.AccessPoint.${x}.WMMEnable=1 boolean    Device.WiFi.AccessPoint.${x}.UAPSDEnable=1 boolean
    Sleep    15
    ${Init_GPV}=    Do Gpv On Dut    Device.WiFi.AccessPoint.${x}.WMMEnable=1 boolean    Device.WiFi.AccessPoint.${x}.UAPSDEnable=1 boolean
    Should Be True    ${Init_GPV}

TR_SET_GW_DHCPLEASE_TIME
    [Arguments]    ${Time}
    TR_SPV_ON_GW    InternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPLeaseTime=${Time} int
    TR_GPV_ON_GW    InternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPLeaseTime=${Time}

TR_SET_GW_DHCP
    [Arguments]    ${Value}
    TR_SPV_ON_GW    InternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPServerEnable=${Value} boolean
    TR_GPV_ON_GW    InternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPServerEnable=${Value}

TR_SPV_2G_SSID1_ANYWPA_BOTH_CUS_KEY
    TR_SPV    Device.WiFi.SSID.1.SSID=%{U_CUSTOM_SSID} string    Device.WiFi.AccessPoint.1.Security.ModeEnabled=WPA-WPA2-Personal string    Device.WiFi.AccessPoint.1.Security.X_ACTIONTEC_COM_WPAEncryptionMode=TKIPandAESEncryption string    Device.WiFi.AccessPoint.1.Security.X_ACTIONTEC_COM_WPA2EncryptionMode=TKIPandAESEncryption string    Device.WiFi.AccessPoint.1.Security.PreSharedKey= %{U_WIRELESS_CUSTOM_WPAPSK} string
    TR_GPV_Check    Device.WiFi.SSID.1.SSID=%{U_CUSTOM_SSID} string    Device.WiFi.AccessPoint.1.Security.ModeEnabled=WPA-WPA2-Personal    Device.WiFi.AccessPoint.1.Security.X_ACTIONTEC_COM_WPAEncryptionMode=TKIPandAESEncryption    Device.WiFi.AccessPoint.1.Security.X_ACTIONTEC_COM_WPA2EncryptionMode=TKIPandAESEncryption    Device.WiFi.AccessPoint.1.Security.PreSharedKey= %{U_WIRELESS_CUSTOM_WPAPSK}

TR_SPV_5G_SSID1_ANYWPA_BOTH_CUS_KEY
    TR_SPV    Device.WiFi.SSID.5.SSID=%{U_CUSTOM_SSID} string    Device.WiFi.AccessPoint.5.Security.ModeEnabled=WPA-WPA2-Personal string    Device.WiFi.AccessPoint.5.Security.X_ACTIONTEC_COM_WPAEncryptionMode=TKIPandAESEncryption string    Device.WiFi.AccessPoint.5.Security.X_ACTIONTEC_COM_WPA2EncryptionMode=TKIPandAESEncryption string    Device.WiFi.AccessPoint.5.Security.PreSharedKey= %{U_WIRELESS_CUSTOM_WPAPSK} string
    TR_GPV_Check    Device.WiFi.SSID.5.SSID=%{U_CUSTOM_SSID} string    Device.WiFi.AccessPoint.5.Security.ModeEnabled=WPA-WPA2-Personal    Device.WiFi.AccessPoint.5.Security.X_ACTIONTEC_COM_WPAEncryptionMode=TKIPandAESEncryption    Device.WiFi.AccessPoint.5.Security.X_ACTIONTEC_COM_WPA2EncryptionMode=TKIPandAESEncryption    Device.WiFi.AccessPoint.5.Security.PreSharedKey= %{U_WIRELESS_CUSTOM_WPAPSK}

TR_Disable_WiFi_2G_MAC_Authentication
    TR_SPV    Device.WiFi.AccessPoint.1.ACL.X_ACTIONTEC_COM_ACL_Enabled =0 boolean
    TR_GPV_Check    Device.WiFi.AccessPoint.1.ACL.X_ACTIONTEC_COM_ACL_Enabled =0 boolean

TR_Disable_WiFi_5G_MAC_Authentication
    TR_SPV    Device.WiFi.AccessPoint.5.ACL.X_ACTIONTEC_COM_ACL_Enabled =0 boolean
    TR_GPV_Check    Device.WiFi.AccessPoint.5.ACL.X_ACTIONTEC_COM_ACL_Enabled =0 boolean

TR_Firmware_Upgrade
    [Arguments]    ${arg1}
    ${rc}=    Firmware_Upgrade    ${arg1}
    should be true    ${rc}

TR_Enable_DUT_Local_SSH
    TR_SPV    Device.X_ACTIONTEC_COM_RemoteLogin.Enable=1 boolean    Device.X_ACTIONTEC_COM_RemoteLogin.Protocol=SSH string    Device.X_ACTIONTEC_COM_RemoteLogin.Username=%{U_DUT_TELNET_USER}    Device.X_ACTIONTEC_COM_RemoteLogin.Password=%{U_DUT_TELNET_PWD}
    TR_GPV_Check    Device.X_ACTIONTEC_COM_RemoteLogin.Enable=1 boolean    Device.X_ACTIONTEC_COM_RemoteLogin.Protocol=SSH string    Device.X_ACTIONTEC_COM_RemoteLogin.Username=%{U_DUT_TELNET_USER}

TR_Check Device ID in SOAP Log
    [Arguments]    ${Manufacturer}    ${OUI}    ${ProductClass}    ${SerialNumber}
    ${Check_GPV}=    Do Gpv On Dut
    Should Be True    ${Check_GPV}
    ${rc1}    ${OUI_log}=    Run And Return Rc And Output    cat /tmp/jacs_output | grep OUI |awk -F\\> '{print $2}' | awk -F\\< '{print $1}' | sort | uniq
    ${rc2}    ${Manufacturer_log}=    Run And Return Rc And Output    cat /tmp/jacs_output | grep Manufacturer |awk -F\\> '{print $2}' | awk -F\\< '{print $1}' | sort | uniq
    ${rc3}    ${ProductClass_log}=    Run And Return Rc And Output    cat /tmp/jacs_output | grep ProductClass |awk -F\\> '{print $2}' | awk -F\\< '{print $1}' | sort | uniq
    ${rc4}    ${SerialNumber_log}=    Run And Return Rc And Output    cat /tmp/jacs_output | grep SerialNumber |awk -F\\> '{print $2}' | awk -F\\< '{print $1}' | sort | uniq
    Should Be Equal As Strings    ${OUI}    ${OUI_log}
    Should Be Equal As Strings    ${Manufacturer}    ${Manufacturer_log}
    Should Be Equal As Strings    ${ProductClass}    ${ProductClass_log}
    Should Be Equal As Strings    ${SerialNumber}    ${SerialNumber_log}

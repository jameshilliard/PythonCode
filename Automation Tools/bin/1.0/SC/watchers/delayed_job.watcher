RAILS_ROOT = "/opt/www/servercontrol"

God.watch do |w|
  w.env = { 'RAILS_ROOT' => "/opt/www/servercontrol",'RAILS_ENV' => "production" }
  w.name = "delayed_job"
  w.interval = 30.seconds
  w.dir = RAILS_ROOT
  w.start = "#{RAILS_ROOT}/script/delayed_job start"
  w.stop = "#{RAILS_ROOT}/script/delayed_job stop"
  w.restart = "#{RAILS_ROOT}/script/delayed_job restart"
  w.start_grace = 10.seconds
  w.restart_grace = 10.seconds
  w.pid_file = "#{RAILS_ROOT}/tmp/pids/delayed_job.pid"
  w.log = "#{RAILS_ROOT}/log/god.log"

  w.behavior(:clean_pid_file)

  # restart if memory gets too high
  w.transition(:up, :restart) do |on|
    on.condition(:memory_usage) do |c|
      c.above = 300.megabytes
      c.times = 2
    end
  end
  # determine the state on startup
  w.transition(:init, { true => :up, false => :start }) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end
  end
  # determine when process has finished starting
  w.transition([:start, :restart], :up) do |on|
    on.condition(:process_running) do |c|
      c.running = true
      c.interval = 5.seconds
    end
    # failsafe
    on.condition(:tries) do |c|
      c.times = 5
      c.transition = :start
      c.interval = 5.seconds
    end
  end
  # start if process is not running
  w.transition(:up, :start) do |on|
    on.condition(:process_running) do |c|
      c.running = false
    end
  end
end

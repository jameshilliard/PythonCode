:javascript
  $(document).observe("dom:loaded", function() {
    $('add_device').observe('click', function(e) { $('available_devices').select('option[selected]').each(function(item) { $('selected_devices').insert(item); item.remove;}); e.preventDefault();});
    $('remove_device').observe('click', function(e) {$('selected_devices').select('option[selected]').each(function(item) { $('available_devices').insert(item); item.remove;}); e.preventDefault();});
    $('add_connection').observe('click', function(e) { $('available_connections').select('option[selected]').each(function(item) { $('selected_connections').insert(item); item.remove;}); e.preventDefault();});
    $('remove_connection').observe('click', function(e) {$('selected_connections').select('option[selected]').each(function(item) { $('available_connections').insert(item); item.remove;}); e.preventDefault();});
    $('fake_server').observe('click', function(e) { 
      if(this.checked) {
        $('skip_server_setup').checked=true;
        $('skip_server_setup').value = 1;
        this.checked=true;
        this.value = 1;
      } else {
        $('skip_server_setup').checked=false;
        this.checked=false;
      }
    });
  });
= simple_form_for(@server) do |f|
  = f.input :ip, :label => "IP Address"
  = f.input :username, :required => true
  = f.input :password, :required => true
  = f.input :state, :label => "Starting server state", :collection => SERVER_STATES, :selected => SERVER_STATES[@server.state]
  - devices_available = Device.all.collect {|d| [d.model,d.id] unless @server.devices.include?(d)}
  / devices
  %span.available_header Available Devices
  %span.selected_header Selected Devices
  = f.association :devices,:input_html => { :id => "available_devices" }, :collection => (devices_available.first.nil? ? [] : devices_available)
  %a#add_device.add_selection{:href => "#"} Add >>
  %a#remove_device.remove_selection{:href => "#"} << Remove
  = f.association :devices,:input_html => { :id => "selected_devices" }, :collection => (@server.devices.collect {|d| [d.model, d.id]}), :label => false
  / connections
  %span.available_header Available Connections
  %span.selected_header Selected Connections
  = f.association :connection_types,:input_html => { :id => "available_connections" }, :collection => ConnectionType.all.collect {|d| [d.connection_description]}
  %a#add_connection.add_selection{:href => "#"} Add >>
  %a#remove_connection.remove_selection{:href => "#"} << Remove
  = f.association :connection_types,:input_html => { :id => "selected_connections" }, :collection => [], :label => false
  %div.input.boolean.optional.skip_server_setup
    %label.boolean.optional{:for => "skip_server_setup"} Skip server setup: 
    %input.boolean.optional{:id => "skip_server_setup", :type=>"checkbox", :name=>"server[skip_setup]", :value => 0, :checked => false}
  %div.input.boolean.optional.skip_server_setup
    %label.boolean.optional{:for => "fake_server"} Fake server?
    %input.boolean.optional{:id => "fake_server", :type=>"checkbox", :name=>"server[fake_server]", :value => 0, :checked => false}
  / End select lists
  = f.button :submit
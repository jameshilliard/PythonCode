#!/usr/bin/perl -w
#-------------------------------------------------------------------
# Name: Joe Nguyen
# Description:
#---------------- 
#   This script is used to execute ssh and given commands directly without waiting for password prompt 
# Things To Do:
#--------------
#--------------------------------------------------------------------
use strict;
use warnings;
use diagnostics;
use Log::Log4perl;
use Pod::Usage;
use Getopt::Long;
use FileHandle;
use Data::Dumper;
use Expect;
#default timeout for each command
my $CMD_TMO = 1200; 
#-----<<<----------------
my $FAIL=1;
my $PASS=0;
my $NOFUNCTION="none";
my @junk = split( /\//, $0);
@junk = split('\.',$junk[$#junk]);
my $scriptFn = $junk[0];
my $logdir = `pwd`;
$logdir=~ s/\n//;
my %userInput = (
    "debug" => "0",
    "logdir"=>$logdir,
    "server"=>$NOFUNCTION,
    "user"=>$NOFUNCTION,
    "password"=>$NOFUNCTION,
    "outputfile"=>$NOFUNCTION,
    "timeout"=>$CMD_TMO,
    "scriptname"=> $scriptFn,
    "screenOff"=> 0,
    "commands"=> [],
    "insert"=> [],
    "logOff"=> 0,
    "noprint"=> 1,
    "errtable"=>[ "Login failed due to a bad username or password",
		  "parser error :",
    ],
    );
#---------------------------------------------------------
# This routine is used to initialize the log feature
#---------------------------------------------------------
sub initLogger {
    my ( $profFile, $junk) = @_;
    my $rc = $PASS;
    my $msg ="Successfully Set Logger";
    my $found=1;
    my $count=$profFile->{seed};
    #--------------------
    # initialize logger
    #---------------------
    my $temp = $profFile->{scriptname}."_$profFile->{seed}";
    my $localLog = $profFile->{logdir}."/$temp.log";
    my $clobberLog = $profFile->{logdir}."/$temp\_clobber.log";
    while ( $found ) {
	$temp = $profFile->{scriptname}."_$count";
	$localLog = $profFile->{logdir}."/$temp.log";
	if (!( -e $localLog )) {
	    $profFile->{seed} = $count;
	    $found = 0;
	    next;
	}
	$count++;
    }
    $clobberLog = $profFile->{logdir}."/$temp\_clobber.log";
    if ( -e $clobberLog ) {
	$temp = `rm -f $clobberLog`;
    }
    # layout: date-module + line mumber -(info,debug,warn,error,fatal)> message +  new line 
    my $layout = Log::Log4perl::Layout::PatternLayout->new("%d--%F{1}:%L--%M--%p> %m%n");
    my $gName = "initLogger";
    if ( defined $profFile->{gcov}{$gName} ) {
	$profFile->{gcov}{$gName} += 1;
    } else {
	$profFile->{gcov}{$gName} = 1;
    }

    $profFile->{logger}= Log::Log4perl->get_logger();
    
    if ( $profFile->{screenOff} == 0 ) {
	my $screen = Log::Log4perl::Appender->new("Log::Log4perl::Appender::Screen",
						  stderr => 0);	
	$profFile->{logger}->add_appender($screen);
    }
    if ( $profFile->{logOff} == 0 ) {
	my $appender = Log::Log4perl::Appender->new("Log::Log4perl::Appender::File",
						    filename => $localLog,
						    mode => "append");
	my $writer = Log::Log4perl::Appender->new("Log::Log4perl::Appender::File",
						  filename => $clobberLog,
						  mode => "clobber");
	$appender->layout($layout);	
	$profFile->{logger}->add_appender($appender);
	$profFile->{logger}->add_appender($writer);
    }
    if ( $profFile -> {noprint} ) {
	$profFile->{logger}->info("--> Log initialized <--");
    }
    return($rc,$msg);

}

#-------------------------------------------------------
# Set up Child Process
# !!!!NOTE that the return code of this routine
# is exceptional. The return code is generated by external script
#--------------------------------------------------------
sub executeCmdProcess {
    my ( $profFile)=@_;
    my $tmo = $profFile->{timeout};
    my $temp = 0;
    my $rc = $PASS;
    my $rc2 ;
    my $index;
    my $errindex;
    my $errsize;
    my $errkey;
    my $limit;
    my $log = $profFile->{logger};
    my $cmd ="";
    my $user = $profFile->{user};
    my $pwd = $profFile->{password};
    my $server  = $profFile->{server};
    my $testLog= $profFile->{outputfile};
    my @buff;
    my $junk;
    my $try= 0;
    ($server,$junk) = split ('\/',$server);
    $limit = @{$profFile->{commands}};
    $junk = system("touch $testLog");
    $log->info("NUMBER OF CMD= $limit" )  if ( $profFile->{debug} > 2 );
    
    for ( $index = 0 ; $index < $limit ; $index++) {
	$cmd = $cmd.$profFile->{commands}[$index]." ; ";
    }
    if ( $limit > 0) {
	$cmd = "ssh $user\@$server "." \"$cmd\"";
    } else {
	$cmd = "ssh $user\@$server "." \"echo NULL \"";
    }
    my $msg = "executeCmdProcess: successfully execute $cmd";
    if ( $profFile->{debug} > 2  ) {  $log->info( "stepCmdProcess: cmd($cmd) ") };
    if ( $profFile->{noprint} ) { $log->info("stepCmdProcess with TMO($tmo):cmd($cmd)")};
    my $exp=Expect->spawn("$cmd");
    $limit = 4;
    if ( defined $exp ) {
#	$exp->log_file( "$testLog","w");
	while ( $try < $limit ) {
	    $exp->expect($tmo,
			 [
			  timeout =>
			  sub {
			      $log->info("stepCmdExecute:$cmd is TimeOUT ");
			      $rc = $FAIL; #failed
			      $try = 10;
			      $msg = " TIMEOUT ";
			      return;
			  }
			 ],
			 [
			  "Connection refused",
			  sub {
			      my $fh = shift;
			      $rc =$FAIL;
			      $try = 11;
			      $msg = " CONNECTION REFUSED";
			      $log->info("$msg"); 
			      return;
			  }
			 ], 
			 [
			  "Are you sure you want to continue connecting (yes/no)?",
			  sub {
			      my $fh = shift;
#			      print (" SSH \n ====== \n");
			      $fh->send("yes\n");
			      $exp->log_file( "$testLog","w");
			      $try = 1;
			      sleep 2;
			  }
			 ],
			 [
			  "[P|p]assword:*",
			  sub {
			      my $fh = shift;
			      $try++;
			      if ( $try >=  $limit ) {
				  $try = 12;
				  $rc=$FAIL;
				  $msg = "UNKNOWN PASSWORD($pwd)";
				  return;
			      }
			      $fh->send("$pwd\n");
			      $exp->log_file( "$testLog","w");
			      $try = 12; # 3
			      $rc = $PASS;
			  }
			 ],
			 [ eof => 
			   sub { 
			       
#			       $log->info ("==>EOF \n"); 
			       $rc = $PASS ;
			       $try = 12;
			   }
			 ],	 	
		);
	}
    
	if ( $rc == $PASS ) {
#	$exp->log_file( "$testLog","w");
	    $exp->expect($tmo,
			 [
			  timeout =>
			  sub {
			      $log->info("stepCmdExecute:$cmd is TimeOUT ");
			      $rc = $FAIL; #failed
			      $try = 10;
			      $msg = " TIMEOUT ";
			      return;
			  }
			 ],
			 [ eof => 
			   sub { 
			       
#			       $log->info ("==>EOF \n"); 
			       $rc = $PASS ;
			       $try = 12;
			   }
			 ],	 	
		);
	    
	}
    

	#$log->info ("==>try($try) \n"); 
	if ($rc == $FAIL) {
	    $msg = "Failed to execute $cmd due to $msg" ;
	} else { 
	    $rc = $PASS;
	    $msg = "Successfully execute ($try)--  $cmd" ;
	}
	$exp->log_file();    
	$exp->soft_close();
	open (CMDFD,"<$testLog") or die " could not read from  $testLog ";
	@buff = <CMDFD>;    
	$temp=@buff;
	for ($index=0;$index < $temp;$index++) {
	   
	    $errsize = @{$profFile->{errtable}};
	    for ( $errindex =0 ; $errindex < $errsize ; $errindex++) {
		$errkey = $profFile->{errtable} [$errindex];
		if ( $buff[$index] =~ /$errkey/ ) {
		    $log->info(" Illegal Execution  = $errkey");
		    $rc2 = 128;
		    $msg = "$buff[$index]" ;
		}
	    }
	    # remove Carriage Return
	    $buff[$index]=~ s/\x0d/\n/g;
	    # remove Escape
	    $buff[$index]=~ s/\x1b/\n/g;
	    # remove bell
	    $buff[$index]=~ s/\x7/\n/g;
#	    #clean all < > brackets
#	    $buff[$index]=~ s/\</\"/g;
#	    $buff[$index]=~ s/\>/\"/g;
	}
	close CMDFD;
    } else {
	$buff[0]="Unrecognized command $cmd\n";
	$buff[1]="Command is aborted\n" ;
	$rc = $FAIL;
	$msg = "Error--unregconized command";
    }
    open (CMDFD,">$testLog") or die " could not write to $testLog ";    
    $limit=@{$profFile->{insert}};
    for ($index=0;$index < $limit;$index++) {
	print CMDFD "$profFile->{insert}[$index]\n";
    }
    $limit=@buff;
    for ($index=0;$index < $limit;$index++) {
	$buff[$index] =~ s/\n//;
	if ( $index < 2 ) {
	    next if ($buff[$index] =~ /^\s*$/);
	}
	if ( $buff[$index] =~ /$user\@$server/ ) {
	    next;
	}
	print CMDFD $buff[$index];
    };
    close CMDFD;
    return ($rc,$msg);
}
#---------------------------------------------------
# Launch all jobs and check their status
#---------------------------------------------------
sub jobLaunch {
    my ($profFile,$junk) = @_;
    my $rc = $PASS;
    my $log = $profFile->{logger};
    my $msg ;
    #--------------------------------------------------------
    # Start to spawn all processes based on IP, USR and CMD
    #--------------------------------------------------------
   ($rc,$msg) = executeCmdProcess($profFile);
    return ($rc,$msg);
}

#************************************************************
# Main Routine
#************************************************************
MAIN:
my $TRUE=1;
my $FALSE=0;
my $option_h;
my $rc =0;
my $msg;
my $count = 0;
my $globalRc = $PASS;
my $option_man = 0;
my $temp;
my $found =0;
my $key;
#---------------------------------------------
# Initialize Logger 
#---------------------------------------------
$userInput{seed}="0";
$rc = GetOptions( "x=s"=>\$userInput{debug}, 
		  "help|h"=>\$option_h, 
		  "man"=>\$option_man, 
		  "l=s"=>sub {  $userInput{logdir} = $_[1];},
		  "t=s"=>\$userInput{timeout},
		  "o=s"=>\$userInput{outputfile},
		  "u=s"=>\$userInput{user},
		  "p=s"=>\$userInput{password},
		  "d=s"=>\$userInput{server},
		  "n"=>sub { $userInput{noprint} = 0},
		  "v=s"=>sub { if ( exists $userInput{commands}[0] ) { push (@{$userInput{commands}},$_[1]); } else {$userInput{commands}[0]=$_[1]; } } ,
		  "i=s"=>sub { if ( exists $userInput{insert}[0] ) { push (@{$userInput{insert}},$_[1]); } else {$userInput{insert}[0]=$_[1]; } } ,
		  );
#Using pod2usage to display Help or Man
pod2usage(1) if ( $option_h );
pod2usage(-verbose=>2) if ( $option_man);
($rc,$msg) = initLogger(\%userInput, 0);
if ( $rc == $FAIL) {
    print ("RC$rc $msg\n");
    exit 1;
} 
if ( $globalRc == $FAIL) {
    $userInput{logger}->info("$msg");
    exit 1;
}

if ( ($userInput{server} =~ /$NOFUNCTION/) ||  ($userInput{server} =~ /^\s*$/ )   ) {
    print ("\n==>Error Missing Server IP address\n");
    pod2usage(1);
    exit 1;
}


#printf("--------------- Input Parameters  ---------------\n") if $userInput{debug} ;

if ( $userInput{ noprint } ) { 
print("--------------- $scriptFn  Input Parameters  ---------------\n");
    foreach $key ( keys %userInput ) {
#    printf (" $key = $userInput{$key} :: " ) if $userInput{debug} ;
	print (" $key = $userInput{$key} :: " );
    }
}

$temp = $userInput{outputfile};
if ( $userInput{outputfile} =~ /$NOFUNCTION/) {
#    $userInput{outputfile} = $userInput{logdir}."/".$userInput{scriptname}."_output_$count.txt"
    $found = 1;
    $count=0 ;
    while ( $found ) {
	$temp= $userInput{logdir}."/".$userInput{scriptname}."_output_$count.txt";
	if ( !(-e $temp)){
	    $found=0;
	    next;
	}
	$count++;
    }
}
$userInput{outputfile} = $temp;
my $limit = @{$userInput{commands}};
my $line;
if ( $userInput{noprint}) {
    if ($limit != 0 ) {foreach $line (  @{$userInput{commands}}) { print "$line \n"; } };
}
#-------------------------------------------------
#Parsing input file from Management Frame Work  
#-------------------------------------------------
    
($rc,$msg) = jobLaunch(\%userInput ,0);
if ( $userInput{noprint} ) {
    $userInput{logger}->info("$msg");
}
if ( $rc == $FAIL) {
    $userInput{logger}->info("==> $userInput{scriptname}  failed");
    exit 1;
}
$userInput{logger}->info("==> $userInput{scriptname} passed");
exit (0);
1;
__END__


=head1 NAME
sshcli.pl is used to access remote server and sequentially execute command after loggin the target then exit

=head1 SYNOPSIS

=over

=item B<sshcli.pl>
[B<-help|-h>]
[B<-man>]

[B<-o> I<output file to save file >]
[B<-l> I<log file directory>]
[B<-t> I<time out for each command executed by sshcli.pl >]
[B<-u> I<user loggin name>]
[B<-p> I<user password>]
[B<-d> I<target address>]
[B<-v> I<command parameters>]
[B<-i> I<insert header title(optional)>]
[B<-n> I<not to print out debug message>]


=back

=head1 OPTIONS AND ARGUMENTS

=over

=item B<-o>

Output file where the output of ssh will be stored

=item B<-l >

Redirect stdout to the /path/sshcli.log

=item B<-u >

User loggin name

=item B<-p>

User password

=item B<-t >

Set timeout in seconds for each command ( default = 60 seconds)

=item B<-help>

Print a brief help message and exit.

=item B<-man>

Print a man page and exit.

=item B<-x>

Set debug to different level . ( more debug messages with higher number)


=item B<-i>
Insert text file at the beginning of the text file 

=item B<-v>
linux command line 

=item B<-n>
Suppress the debug message 


=back


=head1 EXAMPLES

=over

1. The following command is used to loggin to esx006 with user=root and password=password and execute "ls ..." and save the output to "test123.txt" in the directory /tmp
         sshcli.pl -f test123.txt -d esxd006 -u root -p password  -v "ls -alt /var/spool/cron" -l /tmp

=back

=head1 AUTHOR

Please report bugs using L<http://budz/>

Joe Nguyen  E<lt>joe_nguyen@yahoo.comE<gt>

=cut

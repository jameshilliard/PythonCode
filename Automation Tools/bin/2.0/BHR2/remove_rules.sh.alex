#!/bin/bash
######################################################################################
# Usage : remove_rules.sh [-test] -p <postfile> -v <replace rule 1>
#         -v <replace rule 2> [-t <remove rule type>] [-all <remove all rules>]  
# param : to test the script without testcase, use [-test] before all params.    
#           [-all] [-t] can be omitted                      
#                                                                                
######################################################################################
# Author        : Alex 
# Description   : This script is used to remove the added rules
#
#
# History       :
#   DATE        |   REV     |   AUTH    | INFO
#14 May 2012    |   1.0.0   |   Alex    | Inital Version  
#16 May 2012    |   1.0.1   |   Alex    | modified the method of removing pfo rule,and add function of APF
#

REV="$0 version 1.0.1 (16 May 2012)"
echo "REV:${REV}"
usage="bash remove_rules.sh [-test] -p <postfile> -v <replace rule> -s <APF service name> [-all <remove all rules>] [-t <remove rule type>]"

flag_remove_all=0

function value_init
{
    param="$1"
    echo "$param"
    input_param=`echo "$param" | awk -F = '{print $1}'`
    echo "input_param : $input_param"
    case $input_param in 
        "U_CUSTOM_PFO_PROTO")
            U_CUSTOM_PFO_PROTO=`echo "$param" | awk -F = '{print $2}'`
            echo "U_CUSTOM_PFO_PROTO : $U_CUSTOM_PFO_PROTO"
            ;;
        "U_CUSTOM_PFO_EXTERNAL_START")
            U_CUSTOM_PFO_EXTERNAL_START=`echo "$param" | awk -F = '{print $2}'`
            echo "U_CUSTOM_PFO_EXTERNAL_START : $U_CUSTOM_PFO_EXTERNAL_START"
            ;;
        "U_CUSTOM_PFO_EXTERNAL_END")
            U_CUSTOM_PFO_EXTERNAL_END=`echo "$param" | awk -F = '{print $2}'`
            echo "U_CUSTOM_PFO_EXTERNAL_END : $U_CUSTOM_PFO_EXTERNAL_END"
            ;;
        "U_CUSTOM_PFO_INTERNAL_START")
            U_CUSTOM_PFO_INTERNAL_START=`echo "$param" | awk -F = '{print $2}'`
            echo "U_CUSTOM_PFO_INTERNAL_START : $U_CUSTOM_PFO_INTERNAL_START"
            ;;
        "U_CUSTOM_PFO_INTERNAL_END")                
            U_CUSTOM_PFO_EXTERNAL_END=`echo "$param" | awk -F = '{print $2}'`
            echo "U_CUSTOM_PFO_INTERNAL_END : $U_CUSTOM_PFO_INTERNAL_END"
            ;;
        "U_CUSTOM_PFO_SERVER")
            U_CUSTOM_PFO_SERVER=`echo "$param" | awk -F = '{print $2}'`
            echo "U_CUSTOM_PFO_SERVER : $U_CUSTOM_PFO_SERVER"
            ;;
        "TMP_DUT_DEF_GW")
            TMP_DUT_DEF_GW=`echo "$param" | awk -F = '{print $2}'`
            echo "TMP_DUT_DEF_GW : $TMP_DUT_DEF_GW"
            ;;
        *)
            echo "unkown parameter : $input_param"
            ;;
    esac
}

while [ $# -gt 0 ]
do
    case "$1" in
    --test)
        U_AUTO_CONF_BIN=playback_http
        U_DUT_TYPE=BHR2
        U_AUTO_CONF_PARAM="-d 0"
        U_PATH_TBIN=.
        G_HOST_IF0_1_0=eth1
        G_HOST_TIP0_1_0=192.168.172.120
        G_PROD_IP_BR0_0_0=192.168.172.254
        G_CURRENTLOG="./"
        U_DUT_TELNET_USER=admin
        U_DUT_TELNET_PWD=admin1
        shift 1
        ;;
    -v)
        echo "$2"
        export "$2"
        shift 2
        ;;
    -p)
        postfile=$2
        echo "postfile : $postfile"
        shift 2
        ;;
    -t)
        rule_type=$2
        echo "remove_type : $rule_type"
        shift 2
        ;;
    -s)
        APF_name=$2
        echo "APF service name : $APF_name"
        shift 2
        ;;
    -all)
        flag_remove_all=1
        echo "remove all added rules!"
        shift 1
        ;;
    -i)
        not_use_index=$2
        echo "not use index $2"
        shift 2
        ;;
    *)
        echo "$usage"
        exit 1
        ;;
    esac
done

if [ -z "$U_CUSTOM_PFO_SERVER" ]; then
    U_CUSTOM_PFO_SERVER=$G_HOST_TIP0_1_0
fi

if [ -z "$U_CUSTOM_PFO_EXTERNAL_END" ]; then
    U_CUSTOM_PFO_EXTERNAL_PORT=$U_CUSTOM_PFO_EXTERNAL_START
elif [ "$U_CUSTOM_PFO_EXTERNAL_START" == "$U_CUSTOM_PFO_EXTERNAL_END" ]; then
    U_CUSTOM_PFO_EXTERNAL_PORT=$U_CUSTOM_PFO_EXTERNAL_START
else
    U_CUSTOM_PFO_EXTERNAL_PORT=$U_CUSTOM_PFO_EXTERNAL_START"-"$U_CUSTOM_PFO_EXTERNAL_END
fi
echo "U_CUSTOM_PFO_EXTERNAL_PORT : $U_CUSTOM_PFO_EXTERNAL_PORT"


function PFO
{
    echo "perl $U_PATH_TBIN/DUTCmd.pl  -l $G_CURRENTLOG -d $G_PROD_IP_BR0_0_0 -u $U_DUT_TELNET_USER -p $U_DUT_TELNET_PWD -v \"conf print fw/rule/loc_srv\" -o PFO_rules_info.log"
    perl $U_PATH_TBIN/DUTCmd.pl  -l $G_CURRENTLOG -d $G_PROD_IP_BR0_0_0 -u $U_DUT_TELNET_USER -p $U_DUT_TELNET_PWD -v "conf print fw/rule/loc_srv" -o PFO_rules_info.log
    if [ $? -ne 0 ]; then 
        echo "AT_ERROR : failed to excute $U_PATH_TBIN/DUTCmd.pl"
        exit 1
    fi    
    dos2unix $G_CURRENTLOG/PFO_rules_info.log  > /dev/null 2>&1
    dos2unix $G_CURRENTLOG/PFO_rules_info.log  > /dev/null 2>&1

    if [ $flag_remove_all = 0 ]; then
        if [ -z "U_CUSTOM_PFO_EXTERNAL_PORT" ]; then
            echo "AT_ERROR : remove one rule, BUT not specify parameter U_CUSTOM_PFO_EXTERNAL_PORT!"
            exit 1
        fi

        if [ ! `grep "\s*(name(Destination Ports $U_CUSTOM_PFO_EXTERNAL_PORT)" $G_CURRENTLOG/PFO_rules_info.log` ]; then
            echo "AT_ERROR : cannot find rule for U_CUSTOM_PFO_EXTERNAL_PORT=$U_CUSTOM_PFO_EXTERNAL_PORT"
            exit 1
        fi

        find_ahead_enable=1
        pre_line_num=1
        while [ $find_ahead_enable = 1 ]
        do
            line_ahead=`grep -B $pre_line_num "^\s*(name(Destination Ports $U_CUSTOM_PFO_EXTERNAL_PORT)" $G_CURRENTLOG/PFO_rules_info.log| head -1`
            echo ":: $test_content"
            if [ `echo "$line_ahead" | grep "^  ([0-9]*$"` ]; then
                rule_idx=`echo "$line_ahead" | sed 's/  (//g'`
                find_ahead_enable=0
                echo "PFO rule index : $rule_idx"
            elif [ -z "$line_ahead" ]; then
                echo "AT_ERROR : cannot find PFO rule index for U_CUSTOM_PFO_EXTERNAL_PORT=$U_CUSTOM_PFO_EXTERNAL_PORT"
                exit 1
            else
                let "pre_line_num=$pre_line_num+1"
            fi
        done

        PFO_RULE_INDEX=$rule_idx

#        echo -e "\ngoing to remove the rule $rule_idx..."
#        echo "perl $U_PATH_TBIN/DUTCmd\.pl  -l $G_CURRENTLOG -d $G_PROD_IP_BR0_0_0 -u $U_DUT_TELNET_USER -p $U_DUT_TELNET_PWD -v \"conf print fw/rule/loc_srv/$rule_idx\" -v \"conf del fw/rule/loc_srv/$rule_idx\" -v \"conf reconf 1\" -v \"conf print fw/rule/loc_srv\" -o remove_PFO_rule.log"
#        perl $U_PATH_TBIN/DUTCmd.pl  -l $G_CURRENTLOG -d $G_PROD_IP_BR0_0_0 -u $U_DUT_TELNET_USER -p $U_DUT_TELNET_PWD -v "conf print fw/rule/loc_srv/$rule_idx" -v "conf del fw/rule/loc_srv/$rule_idx" -v "conf reconf 1" -v "conf print fw/rule/loc_srv" -o remove_PFO_rule.log
#        if [ $? -ne 0 ]; then 
#            echo "AT_ERROR : failed to excute $U_PATH_TBIN/DUTCmd.pl to remove PFO rule"
#            exit 1
#        fi

    elif [ $flag_remove_all = 1 ]; then
        for rule_idx in `grep "^  ([0-9]*$" $G_CURRENTLOG/PFO_rules_info.log|sed 's/(//g'`
        do
#            echo -e "\ngoing to remove rule $rule_idx"
#            perl $U_PATH_TBIN/DUTCmd.pl  -l $G_CURRENTLOG -d $G_PROD_IP_BR0_0_0 -u $U_DUT_TELNET_USER -p $U_DUT_TELNET_PWD -v "conf del fw/rule/loc_srv/$rule_idx" -o remove_PFO_rule_$rule_idx.log
#            if [ $? -ne 0 ]; then 
#                echo "AT_ERROR : failed to excute $U_PATH_TBIN/DUTCmd.pl to remove all PFO rules"
#                exit 1
#            fi

            if [ -z "$PFO_RULE_INDEX" ]; then
                PFO_RULE_INDEX=$rule_idx
            else
                PFO_RULE_INDEX=$PFO_RULE_INDEX","$rule_idx
            fi

        done
#
#        perl $U_PATH_TBIN/DUTCmd.pl  -l $G_CURRENTLOG -d $G_PROD_IP_BR0_0_0 -u $U_DUT_TELNET_USER -p $U_DUT_TELNET_PWD -v "conf reconf 1" -v "conf print fw/rule/loc_srv" -o after_remove_all_PFO_rule.log
#        if [ $? -ne 0 ]; then 
#            echo "AT_ERROR : failed to excute $U_PATH_TBIN/DUTCmd.pl to remove all PFO rules"
#            exit 1
#        fi
    fi
    
    echo -e "start to remove PFO rule by GUI..."
    echo "$U_AUTO_CONF_BIN $U_DUT_TYPE $postfile $U_AUTO_CONF_PARAM -v PFO_RULE_INDEX=$PFO_RULE_INDEX"
    $U_AUTO_CONF_BIN $U_DUT_TYPE $postfile $U_AUTO_CONF_PARAM -v "PFO_RULE_INDEX=$PFO_RULE_INDEX"

    if [ $? -ne 0 ] ;then
        echo "AT_ERROR : remove PFO rule by GUI failed"
        exit 1
    else
        echo "remove PFO rule by GUI succeeded"
    fi
}

function APF
{
    echo "get pfo rules info"
    echo "perl $U_PATH_TBIN/DUTCmd.pl  -l $G_CURRENTLOG -d $G_PROD_IP_BR0_0_0 -u $U_DUT_TELNET_USER -p $U_DUT_TELNET_PWD -v \"conf print fw/rule/loc_srv\" -v \"conf print service\" -o PFO_rules_info.log"
    perl $U_PATH_TBIN/DUTCmd.pl  -l $G_CURRENTLOG -d $G_PROD_IP_BR0_0_0 -u $U_DUT_TELNET_USER -p $U_DUT_TELNET_PWD -v "conf print fw/rule/loc_srv" -v "conf print service" -o PFO_rules_info.log
    if [ $? -ne 0 ]; then
        echo "AT_ERROR : failed to excute $U_PATH_TBIN/DUTCmd.pl"
        exit 1
    fi
    dos2unix $G_CURRENTLOG/PFO_rules_info.log  > /dev/null 2>&1
    dos2unix $G_CURRENTLOG/PFO_rules_info.log  > /dev/null 2>&1

    if [ -z "$APF_name" ]; then
        echo "AT_ERROR : remove Application Forwarding rule, BUT not specify parameter APF_name!"
        exit 1
    fi

    if [ ! `grep "\s*(name($APF_name))" $G_CURRENTLOG/PFO_rules_info.log` ]; then
        echo "cannot find Application Forwarding service named $APF_name!"
        exit 1
    fi

    service_id=`grep -B1 "^\s*(name($APF_name))" $G_CURRENTLOG/PFO_rules_info.log| head -1| grep "^  ([0-9][0-9]*$"| sed 's/  (//g'`

    find_ahead_enable=1
    pre_line_num=1
    while [ $find_ahead_enable = 1 ]
    do
        line_ahead=`grep -B $pre_line_num "^\s*(service_id($service_id))" $G_CURRENTLOG/PFO_rules_info.log| head -1`
        if [ `echo "$line_ahead" | grep "^  ([0-9][0-9]*"` ]; then
            rule_idx=`echo "$line_ahead" | sed 's/  (//g'`
            find_ahead_enable=0
            echo "PFO rule index : $rule_idx"
        elif [ -z "$line_ahead" ]; then
            echo "cannot find PFO rule index apply APF service $APF_name"
            exit 1
        else
            let "pre_line_num=$pre_line_num+1"
        fi
    done

    PFO_RULE_INDEX=$rule_idx

    echo -e "start to remove PFO rule by GUI..."
    echo "$U_AUTO_CONF_BIN $U_DUT_TYPE $postfile $U_AUTO_CONF_PARAM -v PFO_RULE_INDEX=$PFO_RULE_INDEX"
    $U_AUTO_CONF_BIN $U_DUT_TYPE $postfile $U_AUTO_CONF_PARAM -v "PFO_RULE_INDEX=$PFO_RULE_INDEX"

    if [ $? -ne 0 ] ;then
        echo "AT_ERROR : remove PFO rule apply APF service $APF_name by GUI failed"
        exit 1
    else
        echo "remove PFO rule apply APF service $APF_name by GUI succeeded"
    fi

#    echo -e "\ngoing to remove the rule $rule_idx..."
#    echo "perl $U_PATH_TBIN/DUTCmd\.pl  -l $G_CURRENTLOG -d $G_PROD_IP_BR0_0_0 -u $U_DUT_TELNET_USER -p $U_DUT_TELNET_PWD -v \"conf print fw/rule/loc_srv/$rule_idx\" -v \"conf del fw/rule/loc_srv/$rule_idx\" -v \"conf reconf 1\" -v \"conf print fw/rule/loc_srv\" -o remove_PFO_rule.log"
#    perl $U_PATH_TBIN/DUTCmd.pl  -l $G_CURRENTLOG -d $G_PROD_IP_BR0_0_0 -u $U_DUT_TELNET_USER -p $U_DUT_TELNET_PWD -v "conf print fw/rule/loc_srv/$rule_idx" -v "conf del fw/rule/loc_srv/$rule_idx" -v "conf reconf 1" -v "conf print fw/rule/loc_srv" -o remove_PFO_rule.log
#    if [ $? -ne 0 ]; then 
#        echo "AT_ERROR : failed to excute $U_PATH_TBIN/DUTCmd.pl to remove PFO rule"
#        exit 1
#    fi
}


if [ -z "$rule_type" ]; then
    echo "AT_ERROR : please specify rule type!"
    exit 1
else
    $rule_type
fi

exit 0

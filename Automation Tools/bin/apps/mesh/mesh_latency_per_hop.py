#mesh_latency_per_hop
#
# Objective: In a mesh network, measure the latency one hop at a time
#            and compare latency versus number of hops
#
import sys, time, traceback, math
from basetest import *
from mesh_common import *
import WaveEngine
from CommonFunctions import *
from optparse import OptionParser
from vcl import *
from odict import *
import Qlib

#Global paramters
GraphTypes  = Enum("Maximum Minimum Average Jitter")

class Test(MeshCommon, BaseTest):
    def __init__(self):
        BaseTest.__init__(self)
        ############# Hardware definition ####################
        """
        The CardMap defines the WaveBlade ports that will be available for the test.
        Field Definitions:                                                     
          PortName -    Name given to the specified WaveBlade port. This is a user defined name. 
          ChassisID -   The WT90/20 Chassis DNS name or IP address. Format: 'string' or '0.0.0.0'
          CardNumber -  The WaveBlade card number as given on the Chassis front panel.
          PortNumber -  The WaveBlade port number, should be equal to 0 for current cards. 
          Channel -     WiFi channel number to use on the port. 
          Autonegotiation - Ethernet Autonegotiation mode. Valid values: 'on', 'off', 'forced'.
          Speed -       Ethernet speed setting if not obtained by autonegotiation. Valid values: 10, 100, 1000
          Duplex -      Ethernet Duplex mode if not obtained by autonegotiation. Valid values: 'full', 'half'
        Field Format: dictionary
          For Wifi Cards - 
              <PortName>: ( <ChassisID>, <CardNumber>, <PortNumber>, <Channel> ),
          For Ethernet Cards - 
              <PortName>: ( <ChassisID>, <CardNumber>, <PortNumber>, <autoNegotiation>, <speed>, <duplex> ),
        """
        self.CardMap = { 'WT90_E1': ( 'wt-tga-xx-xx', 1, 0, 'on', 100, 'full' ),
                         'WT90_W1': ( 'wt-tga-xx-xx', 2, 0,   1 ),
                         'WT90_W2': ( 'wt-tga-xx-xx', 3, 0,   4 ),
                         'WT90_W3': ( 'wt-tga-xx-xx', 4, 0,  11 ),
                         'WT90_W4': ( 'wt-tga-xx-xx', 5, 0,  54 )
                       }

        ############# Description of Client setups #######################
        """             
        ClientOptions defines the options available when setting up clients
        Field Definitions:
          PhyRate -   The 802.11 phy rate to apply to all data frames originating from the client.
                      Valid values are all legally defined values
          Sifs -      (optional) Short Interframe Space Value. Units: microseconds
          SlotTime -  (optional) Units: microseconds
          AckTimeout -(optional) Time to wait for an ACK before starting a retry. Units: microseconds
        Field Format: dictionary
          'PhyRate': <rate>, 'Sifs': <sifsValue>, 'SlotTime': <slotValue>, 'AckTimeout': <AckTimeouValue>          
        """
        self.ClientOptions = {'PhyRate': 54, 'Sifs': 16, 'SlotTime': 9, 'AckTimeout': 350}

        """
        Security Options is dictionary of passed security parameters.  It has a mandatory key of 'Method'
        and optional ekys depending upon the particular security chose.  Some common one defined:
        """
        Security_None = {'Method': 'NONE'}
        Security_WEP  = {'Method': 'WEP-OPEN-128', 'KeyId': 0, 'NetworkKey': '00:00:00:00:00:00' }
        Security_WPA2 = {'Method': 'WPA2-EAP-TLS', 'Identity': 'anonymous', 'Password' : 'whatever'}
          
        """
        To setup clients for the test they will be placed into client groups. Each group is assigned to
        a logical port. Many different client groups can be defined and a port may have more than one group
        assigned to it. The client groups are divided between source(orginating traffic) and destination
        (receiving traffic). 
        Field Definitions:
          GroupName -  User defined name given to the client Group
          PortName -   Logical port name defined the CardMap.
          BSSID/SSID - The BSSID or SSID to which this client group will associate. BSSID will be in 
                       the form 00:11:22:33:44:55. SSID will be an ASCII text string. A BSSID of 00:00:00:00:00:00
                       tells the system to pick the first on on the list.
          MACaddress - The MAC address to use. Using the word 'DEFAULT' wiil cause a unique address to be
                       generated by the system. 
          IPaddress -  The Base IP address to use for this client group. Individual addresses for each client
                       in the group will be derived from the base IP address. An address of 0.0.0.0 implies that
                       DHCP will be used to obtain the client IP address. 
          SubNet    -  SubNet mask 
          Gateway -    Gateway address. 
          IncrTuple -  This is tuple of three values in the form (<count>, <MacIncrByte>, <IpIncrByte>). <count>
                       is the number of clients to create, <MacIncrByte> is the byte in the six byte MAC address
                       to increment (e.g. 00:00:00:00:10:02); Use the keyword 'DEFAULT' for automatic MAC incrementing.
                       <IpIncrByte> is the byte in the four byte IP address to increment (e.g. 0.0.0.1 will increment the
                       last byte by 1). 
                       NOTE: An empty tuple - () means that just one client is being defined. 
          Security -   Name of security policy to use for this client group. 'NONE' will cause open security. 
                       Security policies only apply to WiFi clients. 
          Options -    Reference to a client option list as defined above. 
        Field Format: a list of tuples
          ( <GroupName>, <PortName>, <BSSID/SSID>, <MACaddress>, <IPaddress>, <SubNet>, <Gateway>, ( <IncrTuple> ), Security, <options> ),
          ( <GroupName2>, <PortName2>, <BSSID/SSID>, <MACaddress2>, <IPaddress2>, <SubNet2>, <Gateway2>, ( <IncrTuple2> ), Security2, <options2> )
        """
        self.meshGatewayClients = [ ('ClientEth', 'WT90_E1', '00:00:00:00:00:00', 'DEFAULT', '192.168.1.2', '255.255.255.0', '192.168.1.1', (), Security_None, {} )] 
        #Hop 1 is the closest to the Etherent, while hop 10 is the farthest
        self.meshHopClients    = [ [], [], [], [], [], [], [], [], [], [] ]
        self.meshHopClients[1] = [ ('ClientUno', 'WT90_W1', '00:00:00:00:00:00', 'DEFAULT', '192.168.1.100', '255.255.255.0', '192.168.1.1', (), Security_None, self.ClientOptions)]
        self.meshHopClients[2] = [ ('ClientDuo', 'WT90_W2', '00:00:00:00:00:00', 'DEFAULT', '192.168.1.200', '255.255.255.0', '192.168.1.1', (), Security_None, self.ClientOptions)]
        ################### First Level Test Parameters ##########################
        """
        The parameters in this group need to be set by the user to define the primary
        test configuration. 
        FrameSizeList - List of frame sizes to use in performing the test. This is the
                        primary parameter used in reporting results. Units: bytes 
        ILOADlist -     List of intended loads. The intended load is expressed in frames/sec, 
                        and is applied at the port level. The port load is divided equally 
                        between all source clients on a port. Units: frames/second
        Trials -        The number of unique trials to attempt for each combination of the above parameters.
        TransmitTime -  This is the amount of time for a test iteration to execute. RFC2544 recommends a time from
                        30-240 seconds. Units: seconds.
        SettleTime -    Amount of time the test will wait for activity to settle or propagate through the SUT
                        before taking the measurements. RFC2544 recommends 2 seconds.  Units: seconds
        AgingTime -     The number of seconds the DUT/SUT needs to recover between each iteration.  Normally set to
                        zero unless the DUT/SUT resets during the iteration and needs some extra time to recover.
        """
        self.FrameSizeList  = [     88,    128,   256,     512,   1024,   1280,  1518 ]
        self.ILOADlist      = [ 5584.6, 5417.1, 4900.6, 4151.2, 3132.3, 2773.9, 2773.9]
        self.Trials         =  1 
        self.TransmitTime   = 10.0
        self.SettleTime     =  2.0
        self.AgingTime      =  0.0
        self.UserPassFailCriteria = {}
        self.UserPassFailCriteria['user']='False'
        self.FinalResult = 0
        self.DbSupport       = False

        ####################### Learning parameters ################################
        """
        These paramters are used to train the DUT/SUT about the clients and flows that are used during the test.   Loss is not
        an issue during learning, only during the actual measurement.
        
        ClientLearningTime - The number of seconds that a Client will flood a DNS request with its source IP address.  This is
                             used to teach the AP about the existance of a client if Security or DHCP is not suffiecient.
        ClientLearningRate - The rate of DNS request the client will learn with in units of frames per second.
        FlowLearningTime   - The number of seconds that the actual test flows will send out learning frames to populate the
                             DUT/SUT forwarding table.  The rate is at the configure test rate. 
        FlowLearningRate   - The rate of flow learning frames are transmitted in units of frames per second.  This should be set
                             lower than the actual offered loads.
        """
        self.ClientLearningTime = 0
        self.ClientLearningRate = 10
        self.FlowLearningTime   = 2
        self.FlowLearningRate   = 100

        ###################### Logging Parameters #################################
        """
        These parameters determine the how the output of the test is to be formed. 
        CSVfilename -       Name of the output file that will contain the primary test results. This file will be in CSV format.
                            This name can include a path as well. Otherwise the file will be placed at the location of the calling
                            program. 
        ReportFilename -    Name of the output file that will contain a formatted report with graphs, explainations, diagrams and
                            the CSV data.  This file is in PDF format. This name can include a path as well. Otherwise the file will
                            be placed at the location of the calling program.
        LoggingDirectory -  Location for putting the remaining test results files.
        SavePCAPfile -      Boolean True/False value. If True a PCAP file will be created containing the detailed frame data that
                            was captured on each WT-20/90 port. 
        DetailedFilename -  Name of the file for capturing the test details. This file will be put in the LoggingDirectory. 
        """
        self.CSVfilename      = 'Results_mesh_latency_per_hop.csv'
        self.ReportFilename   = 'Report_mesh_latency_per_hop.pdf'
        self.LoggingDirectory = "logs"
        self.SavePCAPfile     = False
        self.DetailedFilename = 'Detailed_mesh_latency_per_hop.csv'

        ####################### Timing parameters ################################
        """
        These parameters will effect the performance of the test. They should only be altered if a specific
        problem is occuring that keeps the test from executing with the DUT. 
        
        BSSIDscanTime -     Amount of time to allow for scanning during the BSSID discovery process. Units: seconds
        AssociateRate -     The rate at which the test will attempt to associate clients with the SUT. This includes the time
                            required to complete .1X authentications. 
                            Units: associations/second. Type: float
        AssociateRetries -  Number of attempts to retry the complete association process for each client in the test.
        AssociateTimeout -  Amount of time the test will wait for a client association to complete before considering iteration
                            a failed connection. Units: seconds; Type: float
        ARPRate -           The rate at which the test will attempt issue ARP requests during the learning phase. 
                            Units: ARPs/second; Type: float
        ARPRetries -        Number of attempts to retry any give ARP request before considering the ARP a failure. 
        ARPTimeout -        Amount of time the test will wait for an ARP response before retrying or failing.
        UpdateInterval -    Interval at which the test will attempt to update test status back to the display console. 
                            Units: seconds
        DisplayPrecision -  Number of decimal places to use in reporting results. 
        ClientContention -  Valid probability is between 0% and 100%.  The number should be interpreted as the "probability" 
                            of contention, and will be specified as the maximum probability of the [n-1,n] segment.
                            Example, specifying 50 means that the probability of generating a FCS error frame is between 40%
                            and 50%.  Only Values of 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, and 100 should be set.
        """
        self.BSSIDscanTime     =   1.5
        self.AssociateRate     =  10.0
        self.AssociateRetries  =   0
        self.AssociateTimeout  =   5.0
        self.ARPRate           =  10.0
        self.ARPRetries        =   3
        self.ARPTimeout        =  10.0
        self.UpdateInterval    =   0.5
        self.DisplayPrecision  =   3
        self.testOptions['ContentionProbability'] = 0

        #################  Flow parameters  #################################
        """
        These parameters determine the type of data frames and flows to be used in the test. 
        
        FlowOptions -   Dictionary of options used to configure data flows. 
                        Field Definitions:
                            Type     - Packet or frame type. Valid values: 'UDP', 'TCP', 'IP', 'ICMP'
                            srcPort  - Source Port number used in the UDP or TCP header
                            destPort - Destination Port number used in the UDP or TCP header
                            PhyRate  - The PhyRate for wireless cards.  Separate from the management frames.
        FlowDirection - Deteremide the direction of the flows:
                            up   - Wireless to Etherenet
                            down - Etherenet to Wireless
                            both - Bidirectional ( up + down )
        """
        self.FlowOptions    = {'Type': 'UDP', 'srcPort': 5902, 'destPort': 5903, 'PhyRate': 54 }
        self.FlowPattern = Enum("up down both")
        self.FlowDirection  = self.FlowPattern.up

########################## DO NOT MODIFY BELOW HERE ##########################
        # Include the version 
        self.version = '$Revision: 1.18 $' 
        self.date    = '$Date: 2007/07/13 18:31:59 $' 

        # What parameters supported by the real time stats
        self.RealtimeData = {'Frame Size': 0, 'Intended Load FPS': 0, 'Offered Load FPS': 0, 'Forwarding Rate FPS': 0,
                             'Average Latency': 0, 'Minimum Latency': 0, 'Maximum Latency': 0}
        self.meshNumOfHopsDict = {}

    def getTestName(self):
        
        return 'mesh_latency_per_hop'
    
    def loadData( self,
                  waveChassisStore,
                  wavePortStore,
                  waveClientTableStore,
                  waveSecurityStore,
                  waveTestStore,
                  waveTestSpecificStore,
                  waveMappingStore,
                  waveBlogStore):
        """
        Load dictionary data into test.
        Raise exception on error
        """
        # FIXME - support for the new client objects 
        # load data into base class
        BaseTest.loadData( self,
                           waveChassisStore,
                           wavePortStore,
                           waveClientTableStore,
                           waveSecurityStore,
                           waveTestStore,
                           waveTestSpecificStore,
                           waveMappingStore,
                           waveBlogStore)
        #These are the test specific parameters that get passed down from the GUI for the test execution
           #___________________________________TEL_________________________________________________
        #check for the db key in the waveTestStore['LogsAndResultsInfo'] dictionary if present assign the
        #the corresponding value to DbSupport. Similarly check for the key for pass/fail criteria pf and
        #update the self.UserPassFailCriteria['user'].If user is True then assign the other values for the
        #calculation purpose to judge the pass/fail of the result.
        if  waveTestStore['LogsAndResultsInfo'].has_key('db'):
            if  waveTestStore['LogsAndResultsInfo']['db'] == "True":
                self.DbSupport = waveTestStore['LogsAndResultsInfo']['db']
        if  waveTestStore['LogsAndResultsInfo'].has_key('pf'):
            if  waveTestStore['LogsAndResultsInfo']['pf'] == "True":
                self.UserPassFailCriteria['user'] = waveTestStore['LogsAndResultsInfo']['pf']
                if waveTestSpecificStore['mesh_latency_per_hop']['AcceptableMaxLatency']:
                    if float (waveTestSpecificStore['mesh_latency_per_hop']['AcceptableMaxLatency']) >= 0:
                        self.UserPassFailCriteria['ref_max_latency']=float(waveTestSpecificStore['mesh_latency_per_hop']['AcceptableMaxLatency'])/1000
                    else:
                        WaveEngine.OutputstreamHDL("\nThe value for the parameter AcceptableMaxLatency should be a positive number\n",WaveEngine.MSG_ERROR)
                        raise WaveEngine.RaiseException
                else:
                    WaveEngine.OutputstreamHDL("\nUser has not given any value for <AcceptableMaxLatency> parameter, hence reverting to default value and proceeding further....\n",WaveEngine.MSG_WARNING)
                    ## Give the reference latency Value in milli seconds default 1 msec (default we are giving in seconds)
                    self.UserPassFailCriteria['ref_max_latency']= 0.01

                if waveTestSpecificStore['mesh_latency_per_hop']['AcceptableAvgLatency']:
                    if float (waveTestSpecificStore['mesh_latency_per_hop']['AcceptableAvgLatency']) >= 0:
                        self.UserPassFailCriteria['ref_avg_latency']=float(waveTestSpecificStore['mesh_latency_per_hop']['AcceptableAvgLatency'])/1000
                    else:
                        WaveEngine.OutputstreamHDL("\nThe value for the parameter AcceptableAvgLatency should be a positive number\n",WaveEngine.MSG_ERROR)
                        raise WaveEngine.RaiseException
                else:
                    WaveEngine.OutputstreamHDL("\nUser has not given any value for <AcceptableAvgLatency> parameter, hence reverting to default value and proceeding further....\n",WaveEngine.MSG_WARNING)
                    ## Give the reference latency Value in milli seconds default 1 msec
                    self.UserPassFailCriteria['ref_avg_latency']= 0.001
        #___________________________________TEL_________________________________________________

        iLoadlist = []
        frameSizeList = []
        iLoadList = waveTestSpecificStore['mesh_latency_per_hop']['ILoadList']
        frameSizeList = waveTestSpecificStore['mesh_latency_per_hop']['FrameSizeList']
        if (len(iLoadList) != 0):
            self.ILOADlist = []
            for eachILoadValue in iLoadList:
                self.ILOADlist.append(int(eachILoadValue))
        if (len(frameSizeList) != 0):
            self.FrameSizeList = []
            for eachFrameSize in frameSizeList:
                self.FrameSizeList.append(int(eachFrameSize))
                
        #Determine the direction of flow
        if waveMappingStore[4].lower() == 'bidirectional':
            self.FlowDirection = self.FlowPattern.both
        elif waveMappingStore[4].lower() == 'unidirectional':
            #Since we have only 1 gateway in the test bed,
            #the length of the source list can determine the
            #direction of flow
            #If the length of Source List which is waveMappingStore[1]
            #is more than 1 (which means there are multiple hops, as there
            #can only be a single gateway, hence the flow direction is from
            #hops to gateway which is upstream else the flow direction is
            #from gateway to hops which is downstream.
            if waveMappingStore[0] == "0":
                self.FlowDirection = self.FlowPattern.down
            elif waveMappingStore[0] == "1":
                self.FlowDirection = self.FlowPattern.up

                        
        #Define the self.meshGatewayClients and self.meshHopClients list here,
        #so that it can be used by the BuildClientTable() method.
        self.meshGatewayClients = []
        self.meshHopClients = []
        
        self.meshGatewayClients, self.meshHopClients = self.Import_MeshClientLists(waveClientTableStore, wavePortStore, waveSecurityStore, waveMappingStore)
        return True

    def PrintRealtimeStats(self, TXstate, Timeleft, ElapsedTime, PassedParameters ):
        Iload = float(PassedParameters['ILOAD'])
        Phase = PassedParameters['Phase'] 
        TotalRX     = 0
        TXframeRate = 0
        RXframeRate = 0
        latencyMin  = MAXlatency
        latencyMax  = 0.0
        latencyAvg  = 0.0
        for Portname in PassedParameters['src']:
            WaveEngine.VCLtest("stats.read('%s')" % (Portname), globals())
            TXframeRate += stats.txMacFramesRate
        for Portname in PassedParameters['des']:
            WaveEngine.VCLtest("stats.read('%s')" % (Portname), globals())
            if WaveEngine.GetCachePortInfo(Portname) == '8023':
                TotalRX    += stats.rxSignatureValid
                latencyAvg += stats.averageLatencyOverall * stats.rxSignatureValid
            else:
                TotalRX    += stats.rxSignatureValidFrames
                latencyAvg += stats.averageLatencyOverall * stats.rxSignatureValidFrames
            RXframeRate += stats.rxMacFramesRate
            if stats.minimumLatencyOverall < latencyMin:
                latencyMin = stats.minimumLatencyOverall
            if stats.maximumLatencyOverall > latencyMax:
                latencyMax = stats.maximumLatencyOverall

        self.RealtimeData['Offered Load FPS']    = TXframeRate
        self.RealtimeData['Forwarding Rate FPS'] = RXframeRate
        if TotalRX > 0 :
            self.RealtimeData['Average Latency'] = latencyAvg / (1000000.0 * TotalRX)
            self.RealtimeData['Minimum Latency'] = latencyMin / 1000000.0
            self.RealtimeData['Maximum Latency'] = latencyMax / 1000000.0
            latencyAvgText  = Float2EngNotation(self.RealtimeData['Average Latency'], self.DisplayPrecision)
            latencyMinText  = Float2EngNotation(self.RealtimeData['Minimum Latency'], self.DisplayPrecision)
            latencyMaxText  = Float2EngNotation(self.RealtimeData['Maximum Latency'], self.DisplayPrecision)
        else:
            latencyAvgText = '---'
            latencyMaxText = '---'
            latencyMinText = '---'

        WaveEngine.OutputstreamHDL("\r%s ILOAD=%d pkts/sec OLOAD=%d pkts/sec -> FR=%d pkts/sec latency: min=%ss max=%ss avg=%ss (%s %.1f)" % (Phase, Iload, TXframeRate, RXframeRate, latencyMinText, latencyMaxText, latencyAvgText, TXstate, Timeleft ), WaveEngine.MSG_OK)

    def startTest(self, FuncRealTime):
        ActiveGroup   = "XmitGroup"
        InActiveGroup = "InactiveGroup"

        for InterationIndex in range(len(self.FrameSizeList)):
            FrameSize = int(self.FrameSizeList[InterationIndex])
            FrameRate = float(self.ILOADlist[InterationIndex])
            self.RealtimeData['Frame Size']        = FrameSize
            self.RealtimeData['Intended Load FPS'] = FrameRate
            nodeList = self.meshHopClients.keys()
            for TrialNumber in range(1, 1 + self.Trials):
                
                for node in nodeList:
                    #Build a new flowlist
                    ActiveFlowList   = self.HopFlowList[node]
                    if len(ActiveFlowList) == 0:
                        continue

                    SrcCardList = []
                    DesCardList = [] 
                    for eachflow in ActiveFlowList.keys():
                        ( src_port, src_client, des_port, des_client ) = ActiveFlowList[eachflow]
                        if not src_port in SrcCardList:
                            SrcCardList.append(src_port)
                        if not des_port in DesCardList:
                            DesCardList.append(des_port)

                    #Activate the flows for this node
                    FrameRatePerPort = FrameRate / float(len(ActiveFlowList))
                    self._createFlowGroup(ActiveFlowList, ActiveGroup)

                    if self.FlowOptions['Type'] == 'TCP':
                        # do biflow.connect for flow learning 
                        if self.connectTcpFlows(ActiveFlowList, operation='connect') < 0:
                            raise WaveEngine.RaiseException 

                    WaveEngine.ModifyFlows(ActiveFlowList, {'FrameSize': FrameSize, 
                                                            'IntendedRate': FrameRatePerPort , 
                                                            'NumFrames': WaveEngine.MAXtxFrames, 
                                                            'RateMode': 'pps',
                                                            'Type' : self.FlowOptions['Type']},
                                                            doTcpConnect=True)
                    """ FIXME: need a ministack & L7appd fixes to be able to
                               do flow startup without flow setup
                    if self.FlowOptions['Type'] == 'TCP':
                        # do biflow.connect for flow learning 
                        if self.connectTcpFlows(ActiveFlowList, operation='connect') < 0:
                            raise WaveEngine.RaiseException                                        
                    """
                    
                    #Learning Phase
                    WaveEngine.ClearAllCounter(self.CardList)
                    WaveEngine.WriteAPinformation(self.ListOfClients)
                    PassedParam = {'FrameSize': FrameSize, 'ILOAD': FrameRate, 'src': SrcCardList, 
                                   'des': DesCardList, 'Phase': 'Learning'}
                    WaveEngine.OutputstreamHDL("Trial:%d FrameSize: %s Node ID: %s ILOAD:%s pkts/sec, Starting learning phase\n" % (TrialNumber, FrameSize, node, FrameRate), WaveEngine.MSG_OK)
                    self._transmitIteration(self.FlowLearningTime , self.SettleTime, self.UpdateInterval, ActiveGroup, True, FuncRealTime , PassedParam)
                    WaveEngine.OutputstreamHDL("\n", WaveEngine.MSG_OK)
                    WaveEngine.WriteDetailedLog([''])
                    WaveEngine.WriteDetailedLog(['FrameSize:', FrameSize, 'ILOAD:', FrameRate, 
                                                 'Trial:', TrialNumber,
                                                 'Node ID:', node,
                                                 'Hop:', self.meshNumOfHopsDict[node]])

                    #Calculate the buckets
                    (latencyMin, latencyMax, latencyAvg) = WaveEngine.MeasurePort_Latency(DesCardList, self.TransmitTime)
                    WaveEngine.ClearAllCounter(self.CardList)
                    WaveEngine.WriteAPinformation(self.ListOfClients, 1)
                    LatencyBucketSettings = WaveEngine.ConfigureLatencyBuckets(DesCardList, latencyMin, latencyMax)
                    if self.UserPassFailCriteria['user']=="True":
                            CSVline = ('Frame Size', 'ILOAD pkt/sec', 'Trial', 'Node ID', 'Hop',
                               'Minimum Latency', 'Maximum Latency', 'Average Latency',
                               'Average Jitter(us)','USC:AVGLAT','USC:MAXLAT')
                    else: 
                            CSVline = ('Frame Size', 'ILOAD pkt/sec', 'Trial', 'Node ID', 'Hop', 
                               'Minimum Latency', 'Maximum Latency', 'Average Latency',  
                               'Average Jitter(us)')
                    for n in LatencyBucketSettings:
                        CSVline += ( "< %ss" % (Float2EngNotation(float(n) / 1000000.0, self.DisplayPrecision)), )
                    self.ResultsForCSVfile.append( CSVline )
                    
                    # Certain DUT do not like the constant traffic
                    if self.AgingTime > 0:
                        WaveEngine.Sleep(self.AgingTime, 'DUT/SUT recovery time,')

                    # Test Phase
                    PassedParam['Phase'] = 'Test'
                    WaveEngine.OutputstreamHDL("Trial:%d FrameSize: %s Node ID: %s ILOAD:%s pkts/sec starting to transmit\n" % (TrialNumber, FrameSize, node, FrameRate), WaveEngine.MSG_OK)
                    self.modifyFlows(FrameRate, FrameSize, flowList=ActiveFlowList)
                    WaveEngine.WriteDetailedLog(['FrameSize:', FrameSize, 'ILOAD:', FrameRate, 
                                                 'Trial:', TrialNumber, 
                                                 'TransmitTime (sec):', "%.4f" % self.TransmitTime,
                                                 'Node ID:', node,
                                                 'Hop:', self.meshNumOfHopsDict[node]])                    
                    self._transmitIterationWithBlogCards(self.TransmitTime, self.SettleTime, self.UpdateInterval, ActiveGroup, True, FuncRealTime , PassedParam, self.waveBlogStore )
                    
                    WaveEngine.OutputstreamHDL("\n", WaveEngine.MSG_OK)
       
                    #Get final results for this ILOAD
                    (latencyMin, latencyMax, latencyAvg) = WaveEngine.MeasurePort_Latency(DesCardList, self.TransmitTime)
                    LatencyBucketCount                   = WaveEngine.MeasureFlow_LatencyHistogram(ActiveFlowList, self.TransmitTime)
                    (JitterMin, JitterMax, JitterAvg)    = WaveEngine.MeasureFlow_Jitter(ActiveFlowList) 
                    
                    TextLatencyMin = Float2EngNotation(latencyMin, self.DisplayPrecision)
                    TextLatencyMax = Float2EngNotation(latencyMax, self.DisplayPrecision)
                    TextLatencyAvg = Float2EngNotation(latencyAvg, self.DisplayPrecision)
                    #_____________________PATCH from TEL________________________________
                    if self.UserPassFailCriteria['user']=="True":
                       TestResult=TestResult1= ''
                       if latencyMin == 0.0 or latencyMax == 0.0 or latencyAvg == 0.0:
                               TestResult=TestResult1='INVALID'
                               WaveEngine.OutputstreamHDL("\nThe test failed , so applying P/F criteria is invalid", WaveEngine.MSG_SUCCESS)
                       else:    
                          if (float(self.UserPassFailCriteria['ref_avg_latency']) > latencyAvg):
                                TestResult=TestResult+'PASS'
                                WaveEngine.OutputstreamHDL("\nAchieved the P/F criteria given by the User-Avg:%ss , Achieved-Avg:%ss\n" % ( float ( self.UserPassFailCriteria ['ref_avg_latency'] ) , TextLatencyAvg),WaveEngine.MSG_SUCCESS)
                          else:
                                TestResult=TestResult+'FAIL'
                                WaveEngine.OutputstreamHDL("\nThe test failed to achieve the P/F criteria given by the User-Avg:%ss,Achieved-Avg:%ss\n " %( float ( self.UserPassFailCriteria['ref_avg_latency'] ) , TextLatencyAvg), WaveEngine.MSG_WARNING)

                          if (float(self.UserPassFailCriteria['ref_max_latency']) > latencyMax):
                                TestResult1=TestResult1+'PASS'
                                WaveEngine.OutputstreamHDL("\nAchieved the P/F criteria given by the User-Max:%ss,Achieved-Max:%ss\n" %(float(self.UserPassFailCriteria['ref_max_latency']),TextLatencyMax,),WaveEngine.MSG_SUCCESS)
                          else:
                                TestResult1=TestResult1+'FAIL'
                                WaveEngine.OutputstreamHDL("\nThe test failed to achieve the P/F criteria given by the User-Avg:%ss ,Achieved-Avg:%ss\n" %( float ( self.UserPassFailCriteria['ref_max_latency'] ) , TextLatencyMax), WaveEngine.MSG_WARNING)

                       CSVline = (FrameSize, FrameRate, TrialNumber, node, self.meshNumOfHopsDict[node],latencyMin, latencyMax, latencyAvg, JitterAvg,TestResult,TestResult1)
                    else:
                        CSVline = (FrameSize, FrameRate, TrialNumber, node, self.meshNumOfHopsDict[node], latencyMin, latencyMax, latencyAvg, JitterAvg)
                    for n in LatencyBucketCount:
                        CSVline += ( int(n), )
                    self.ResultsForCSVfile.append( CSVline )
                    self.ResultsForCSVfile.append( ('',) )
                    if latencyMin == 0.0 or latencyMax == 0.0 or latencyAvg == 0.0:
                        WaveEngine.OutputstreamHDL("Error: Size:%d ILOAD:%.1f pkts/sec zero latency number: Minimum = %ss Maximum = %ss Average = %ss\n" % (FrameSize, FrameRate, TextLatencyMin, TextLatencyMax, TextLatencyAvg), WaveEngine.MSG_ERROR)
                    else:
                        WaveEngine.OutputstreamHDL("Completed: Size:%d ILOAD:%.1f pkts/sec Latency: Minimum = %ss Maximum = %ss Average = %ss\n" % (FrameSize, FrameRate, TextLatencyMin, TextLatencyMax, TextLatencyAvg), WaveEngine.MSG_SUCCESS)
                    
                    if self.FlowOptions['Type'] == 'TCP':
                        # Wait for 2 seconds to make sure we get all the TCP ACKs
                        WaveEngine.Sleep(2, 'TCP settling time') 
                        # disconnect TCP flows at the end of each trial
                        if self.connectTcpFlows(ActiveFlowList, operation='disconnect') < 0:
                            raise WaveEngine.RaiseException     
                        #FIXME: remove this line when we can do flow startup without flow setup                                   
                        WaveEngine.ModifyFlows(ActiveFlowList, {'Type' : self.FlowOptions['Type']}, 
                                               doTcpConnect=False)
                        
                    WaveEngine.OutputstreamHDL("\n", WaveEngine.MSG_OK)

                    #Clean up the group for the next run
                    for eachFlow in ActiveFlowList.keys():
                        WaveEngine.VCLtest("flowGroup.move('%s', '%s', '%s')"   % (eachFlow, ActiveGroup, InActiveGroup))
                    WaveEngine.VCLtest("flowGroup.destroy('%s')"   % (ActiveGroup))
                WaveEngine.CheckEthLinkWifiClientState(self.CardList, self.ListOfClients)
                                
    # Extract data from the CVS file and puts store it as the object's attribute
    def ParseCVSdata(self, dataFromFile):
        # List if bars used in the Latency graph
        self._LatencyList       = []
        # Data for the Latency Graph
        self._LatencyData   = {}
        # Data for the detailed section of the Report
        if self.UserPassFailCriteria['user']=="True":
                 self._LatencyResults = [('Frame Size', 'Frame Rate', 'Trial Number', 'Node ID', 'Hop', 'Minimum Latency', 'Maximum Latency', 'Average Latency', 'Average Jitter','USC:AVGLAT','USC:MAXLAT'),]
        else:
                 self._LatencyResults = [('Frame Size', 'Frame Rate', 'Trial Number', 'Node ID', 'Hop', 'Minimum Latency', 'Maximum Latency', 'Average Latency', 'Average Jitter'),]
        # Data for the Histogram Charts
        self._HistogramData = []
        self._BucketMin     = 4096.0
        self._BucketMax     = 0.0
        
        FrameSize = 'None'
        for eachLine in dataFromFile:
            #print len(eachLine), ':', eachLine
            if self.UserPassFailCriteria['user']=="True":
                if len(eachLine) != 27:
                     continue

                (FrameSize, FrameRate, TrialNumber, Node, Hop, LatencyMin, LatencyMax, LatencyAvg, JitterAvg,AVG,MAX, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16) = eachLine
                if not isnum(FrameSize):
                       Names = eachLine[11:]
                       BucketValues = []
                       for eachName in Names:
                          BucketValues.append(EngNotation2Int(eachName[2:-1]))
                       continue

            else:
                   if len(eachLine) != 25:
                          continue
            
                   (FrameSize, FrameRate, TrialNumber, Node, Hop, LatencyMin, LatencyMax, LatencyAvg, JitterAvg, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16) = eachLine
                   if not isnum(FrameSize):
                         Names = eachLine[9:]
                         BucketValues = []
                         for eachName in Names:
                             BucketValues.append(EngNotation2Int(eachName[2:-1]))
                         continue
            
            TotalCount = (B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16)
            FrameSize =int(FrameSize)
            FrameRate = float(FrameRate)
            IndexKey = (FrameSize, FrameRate, Node)
            if not IndexKey in self._LatencyList:
                self._LatencyList.append(IndexKey)

            if self._LatencyData.has_key(IndexKey):
                (TotalMin, TotalMax, TotalAvg, TotalJitterAvg, Count) = self._LatencyData[IndexKey]
                if TotalMin > LatencyMin:
                    TotalMin = LatencyMin
                if LatencyMax > TotalMax:
                    TotalMax = LatencyMax
                self._LatencyData[IndexKey] = (TotalMin, TotalMax, TotalAvg + LatencyAvg, TotalJitterAvg + JitterAvg, Count + 1)
            else:
                self._LatencyData[IndexKey] = (LatencyMin, LatencyMax, LatencyAvg, JitterAvg, 1)

            # Make sure the last bucket suppose to have counts
            BucketValues[15] = LatencyMax
            if LatencyMax <= BucketValues[14] and TotalCount[15] > 0:
                WaveEngine.OutputstreamHDL("WARNING: detected inconsistancy between maximum latency and the last bucket.\n", WaveEngine.MSG_WARNING)

            #For the detailed section
            JitterText = "%ss" % (Float2EngNotation(float(JitterAvg/1000000.0), self.DisplayPrecision))
            LatencyMinText = "%ss" % (Float2EngNotation(float(LatencyMin), self.DisplayPrecision) )
            LatencyMaxText = "%ss" % (Float2EngNotation(float(LatencyMax), self.DisplayPrecision) )
            LatencyAvgText = "%ss" % (Float2EngNotation(float(LatencyAvg), self.DisplayPrecision) )
            if self.UserPassFailCriteria['user']=="True":
                 self._LatencyResults.append( (FrameSize, FrameRate, TrialNumber, Node, Hop, LatencyMinText, LatencyMaxText, LatencyAvgText, JitterText,AVG,MAX,), )
            else:
                 self._LatencyResults.append( (FrameSize, FrameRate, TrialNumber, Node, Hop, LatencyMinText, LatencyMaxText, LatencyAvgText, JitterText), )  

            #Process data for the histogram graph
            graphTitle = "Latency Histogram Trial:%s Size:%s Rate:%s frames/sec" % (TrialNumber, FrameSize, FrameRate)
            self._HistogramData.append( (Names, [TotalCount, ], graphTitle, LatencyMin, LatencyMax, LatencyAvg), )
            min = EngNotation2Int(Names[0][2:-1])
            max = EngNotation2Int(Names[14][2:-1])
            if self._BucketMin > min:
               self._BucketMin = min
            if max > self._BucketMax:
               self._BucketMax = max

        self._BucketMin = pow(10,int(math.log10(self._BucketMin)-1))
        self._BucketMax = pow(10,int(math.log10(self._BucketMax)))

    def PrintReport(self):
        import os.path
        # Text Paragraphs
        Overview1 = "The Latency Per Hop test determines the latency of each hop through "\
                    "the mesh network for the system under test (SUT). The test allows you "\
                    "to present the SUT with an intended load (ILOAD) and measures the time "\
                    "that it takes for frames to be forwarded through each node in the SUT "\
                    "(latency). To understand how latency varies with different types of "\
                    "traffic, you can set up different ILOADS and frame sizes. Each "\
                    "combination of ILOAD and frame size is tested separately."
        Overview2 = "If multiple nodes are involved in the test, the ILOAD is applied to "\
                    "each node; if multiple clients are associated with a node, the ILOAD "\
                    "for that node is divided evenly between the clients."
        Overview3 = "Latency is measured by taking the difference between the arrival time "\
                    "of a packet at the destination port and the time the packet was sent "\
                    "at the source port. Frames are transmitted for a fixed period of time. "\
                    "The difference between the transmit time and the receive time is the "\
                    "latency."
        Overview4 = "The results show the latencies for each frame size as distributed into "\
                    "16 latency buckets. Each latency bucket has a maximum latency time "\
                    "boundary, which are set up in ascending order. The arriving packets "\
                    "are placed in the last latency bucket for which their latency value "\
                    "does not exceed the latency bucket boundary." 
        LatencyText="The average latency graph shows the relationship of different offered loads versus "\
                    "the number of mesh hops that the frames had to traverse.  Few mesh hops should have "\
                    "lower latency than more mesh hops.  The lower the average latency is the better "\
                    "overall performance."
        MinMaxText= "The minimum and maximum latency graph shows the relationship of different offered "\
                    "loads versus the number of mesh hops that the frames had to traverse.  Each bar "\
                    "represents the latency for a single packet.  For a particular offered load and mesh "\
                    "hop, every frame's latency for all the trials is examined and only the lowest and "\
                    "highest are graphed."
        JitterText= "The average jitter graph is a statistical manipulation of each of the frame's latency "\
                    "value.  On each trial, the standard deviation of a frame's latency for a particular "\
                    "offered load and mesh hop is computed.  When multiple trials are run, the jitter is "\
                    "averaged together."
        HistogramText="Latency histogram graphs are not included in this report to conserve space.  The data "\
                    "is saved in '%s'." % (self.CSVfilename)
                    
        Method1 = "The test associates test clients with the SUT ports, including the "\
                  "necessary security protocols and any learning transmissions. The test "\
                  "then generates test traffic between the test clients. The test traffic "\
                  "is applied on a per node basis, starting from the nearest (lowest hop "\
                  "count) to the furthest (highest hop count) node from the mesh gateway. "\
                  "Proprietary timestamps inserted in each test traffic frame are then "\
                  "used to calculate the minimum, maximum and average latency as per RFC "\
                  "2544, as well as the smoothed inter-arrival jitter according to RFC 3550." 
        Method2 = "Each combination of ILOAD and frame size is tested separately. If "\
                  "multiple nodes are involved in the test, the ILOAD is applied to each "\
                  "node; if multiple clients are associated with a node, the ILOAD for "\
                  "that node is divided evenly between the clients."
        Method3 = "Latency measurements are made accurately even in the presence of "\
                  "frame loss. However, the ILOAD should be set such that no frame "\
                  "loss occurs; otherwise, buffer occupancy delays can obscure actual "\
                  "SUT datapath delays. The throughput test may be used to determine "\
                  "this traffic level."
        Method4 = "The results per node are recorded separately for each combination "\
                  "of test conditions, as well as for each trial if multiple trials "\
                  "are run. Results from multiple trials are averaged into the graphs "\
                  "shown in previous sections."
        
        HistogramDetails = "The latency histogram data is intentionaly left out the the detailed section.  "\
                           "The histogram number are still recorded in the file '%s'." % (self.CSVfilename)
        RSSIdetails = """SUT details are given below. The received signal strength indication (RSSI) from the SUT is sampled on each port at the start of each trial and averaged over all trials."""
        RSSIdetails2 = """Desired RSSI values are in the range -25 dBm to -35 dBm. If the RSSI is not in this range, the external attenuation should be modified to bring it into this range."""
        IGdetails =     "The table below shows the different frame size bands configured along with their % "\
                        "strike rate. The % strike rate across a given frame size band represents the % knock down "\
                        "rate of a given frame size within a certain trial duration."
        IISdetails =    "The table below lists all the ports that were generating interference during the "\
                        "test run. Also shown are the instants of time (as % offset from the Transmit time) "\
                        "when these ports were fired up to generate the desired percentage of interference in "\
                        "the test bed."
                        
        MyReport = WaveReport(os.path.join(self.LoggingDirectory, self.ReportFilename))
        if MyReport.Story == None:
            # Reportlab is not installed, no use creating a file
            return
        MyReport.Title("Mesh Latency Per Hop Report", self.DUTinfo, self.TestID )
        MyReport.InsertHeader("Overview")
        MyReport.InsertParagraph(Overview1)
        MyReport.InsertParagraph(Overview2)
        MyReport.InsertParagraph(Overview3)
        MyReport.InsertParagraph(Overview4)        
        self.ParseCVSdata(self.ResultsForCSVfile)
        GraphWidth  = 6.0 * inch
        GraphHeight = 3.5 * inch
        MyReport.InsertObject(self.CreateLatencyGraph(GraphWidth, GraphHeight, GraphTypes.Average, self._LatencyList, self._LatencyData))
        MyReport.InsertParagraph(LatencyText)
        #MyReport.InsertPageBreak()

        MyReport.InsertHeader("Graphs")
        MyReport.InsertParagraph(MinMaxText)
        MyReport.InsertObject(self.CreateLatencyGraph(GraphWidth, GraphHeight, GraphTypes.Minimum, self._LatencyList, self._LatencyData))
        MyReport.InsertObject(self.CreateLatencyGraph(GraphWidth, GraphHeight, GraphTypes.Maximum, self._LatencyList, self._LatencyData))
        #MyReport.InsertPageBreak()
        MyReport.InsertParagraph(JitterText)
        MyReport.InsertObject(self.CreateLatencyGraph(GraphWidth, GraphHeight, GraphTypes.Jitter, self._LatencyList, self._LatencyData))
        MyReport.InsertParagraph(HistogramText)
        
        MyReport.InsertPageBreak(inch) #Break if there is less than an inch left.
        MyReport.InsertHeader("Test Configuration")
        ConfigParamters = [('Parameter', 'Value', 'Description'),
                           ('Learning Time', "%d secs" % (self.FlowLearningTime),  'The number of seconds to transmit frames for the DUT/SUT to populate its forwarding tables'),
                           ('Transmit Time', "%d secs" % (self.TransmitTime), 'The number of seconds that the WaveTest will transmit for each iteration.'),
                           ('Settle Time', "%d secs" % (self.SettleTime), 'How many seconds to wait for the DUT/SUT to finish forwarding frames before making the final measurement'),
                           ('Trials', "%d" % (self.Trials), 'Number of times the measurement will be repeated.  Multiple trials are used for averaging the measurement.')
                           ]
        if self.testOptions['ContentionProbability'] > 0:
            ConfigParamters.append( ('Client Contention', "%d%%" % (self.testOptions['ContentionProbability']) , 'The probability that 2 clients will try to access the media at the same time and create an errored frame.'), )
        MyReport.InsertParameterTable(ConfigParamters, columns=[1.5*inch, 1.25*inch, 3.25*inch])
        
        MyReport.InsertPageBreak(inch * 1.75) #Break if there is less than an inch left.
        MyReport.InsertHeader("Mesh Client Map")
        
        if len(self.meshHopClients) <= 6:   
            MyReport.InsertObject(self.MeshClientMap(self.meshGatewayClients, self.meshHopClients, self.FlowDirection, self.CardMap) )

        MyReport.InsertPageBreak()  #Forced break
        MyReport.InsertHeader("Methodology")
        MyReport.InsertParagraph(Method1)
        MyReport.InsertParagraph(Method2)
        MyReport.InsertParagraph(Method3)
        MyReport.InsertParagraph(Method4)
        
        MyReport.InsertPageBreak(inch * 1.5) #Break if there is less than an inch left.
        MyReport.InsertHeader("Detailed Results")
        if self.UserPassFailCriteria['user']=="True":
             MyReport.InsertDetailedTable(self._LatencyResults, columns=[0.5*inch, 0.6*inch, 0.6*inch, 0.8*inch, 0.4*inch, 0.8*inch, 0.8*inch, 0.7*inch, 0.7*inch,1*inch, 1*inch])
             NoteText=""" Note: Abbreviations used: USC-User Specified Criteria,MAXLAT: Maximum Latency,AVGLAT: Average Latency"""
             MyReport.InsertParagraph(NoteText)
             fail_count = 0
             pass_count = 0
             iteration_count=-1
             fail_percent=0
             for each_tuple in self._LatencyResults:
                    iteration_count=iteration_count+1
                    if each_tuple[-1] == 'FAIL' and  each_tuple[-2] == 'FAIL':
                        fail_count=fail_count+1
                    elif  each_tuple[-1] == 'PASS' and each_tuple[-2] == 'PASS':
                        pass_count =pass_count+1
                    else:
                        pass
            #fail_percent=float(fail_count*100)/iteration_count
             TextLatMax = Float2EngNotation(float(self.UserPassFailCriteria['ref_max_latency']), self.DisplayPrecision)
             TextLatAvg =Float2EngNotation(float(self.UserPassFailCriteria['ref_avg_latency']), self.DisplayPrecision)
             MyReport.InsertHeader( "User Specified P/F Criteria" )
             userspecifiedtext= """  With this feature, user can decide the criteria using which the test is evaluated.We will get
 the input from the user for maximum and average allowable latency in (ms), based on that we will evaluate the test result as PASS/FAIL. """
             MyReport.InsertParagraph (userspecifiedtext)
             ConfigParameters = [ ( 'Parameter', 'User Configured Threshold', 'Overall Result' ),
                                 ( ' Avg Latency and Max Latency',"%s : %s secs" %(TextLatAvg,TextLatMax),
                                   "Total:%s, PASS:%s and FAIL:%s"%(iteration_count,pass_count,fail_count) )]
             if fail_count > 0:
                self.FinalResult = 3
             MyReport.InsertParameterTable( ConfigParameters, columns = [ 2*inch, 2*inch, 2*inch ] )

        else:    
              MyReport.InsertDetailedTable(self._LatencyResults, columns=[0.5*inch, 0.6*inch, 0.6*inch, 0.8*inch, 0.4*inch, 0.8*inch, 0.8*inch, 0.7*inch, 0.7*inch])
        MyReport.InsertParagraph(HistogramDetails)

        MyReport.InsertPageBreak(inch)
        MyReport.InsertHeader("Access Point Information")
        MyReport.InsertParagraph(RSSIdetails)
        MyReport.InsertDetailedTable(self.AnalyizeRSSIdata(WaveEngine.ReadAPinformation()), columns=[1.5*inch, 0.60*inch, 1.25*inch, 1.55*inch, 0.40*inch, 0.40*inch, 0.40*inch])
        MyReport.InsertParagraph(RSSIdetails2)

        if len(self.InterferenceRate) > 1:
            MyReport.InsertPageBreak(inch * 1.50)
            MyReport.InsertHeader("Interference Information")
            MyReport.InsertParagraph(IGdetails)
            MyReport.InsertDetailedTable(self.InterferenceRate, columns=[1.3*inch, 0.9*inch, 1.3*inch, 1.3*inch, 1.2*inch])
            
        # other info section
        MyReport.InsertPageBreak(inch)
        MyReport.InsertHeader("Other Info")
        OtherParameters = []
        OtherParameters.append( ( 'Results Directory',  str( self.LoggingDirectory ) )  )
        for item in self.OtherInfoData.items():
            OtherParameters.append( item )
        OtherParameters.append( ( 'WaveTest Version',   str( action.getVclVersionStr() ) ) )
        MyReport.InsertGenericTable( OtherParameters , columns = [ 1.5*inch, 4.5*inch ] )
        # generate output
        self.BuildReport(MyReport)

    def run(self):
        # For debuging reports
        #print "\n--- New Run --- "
        #self.ReadResults()
        #self.BuildClientTable()
        #self.PrintReport()
        #return
   
        #Add code here to check setup parameters
        if self.FlowLearningTime < 2.0:
            WaveEngine.OutputstreamHDL('ERROR: FlowLearningTime needs to be at least 2 seconds or longer for histograms to work.', WaveEngine.MSG_ERROR)
            return
        
        #Configure the test which includes configure chassid,ports,create clients and create flows (Configure Stage)
        #Setup the clients which includes connect clients,ARP and DHCP
        WaveEngine.OpenLogging(Path=self.LoggingDirectory, Detailed=self.DetailedFilename)
        self.ExitStatus = 0

        try:
            self.BuildClientTable()
            self.configurePorts()
            self.initailizeCSVfile()
            self.VerifyBSSID_MAC()
            self.createClients()
            self.connectClients()
#            self._clientLearning(self.ListOfClients, self.ClientLearningTime, self.ClientLearningRate)
            self.configureMeshFlows()
            self.doArpExchanges()
            self.startTest(self.RealtimeCallback)
            self.SaveResults()
            self.PrintReport()
            self.ExitStatus= self.FinalResult
        except WaveEngine.RaiseException:
            WaveEngine.OutputstreamHDL('\n', WaveEngine.MSG_OK)
            (exc_type, exc_value, exc_traceback) = sys.exc_info()
            WaveEngine.OutputstreamHDL(str(exc_value), WaveEngine.MSG_ERROR)
            self.ExitStatus = 2
            self.SaveResults()
        except Exception, e:
            # some other error occured
            (exc_type, exc_value, exc_tb) = sys.exc_info()
            try:
                # print out nice traceback and error strings
                msg = "Fatal script error:\n"
                for text in traceback.format_exception(exc_type, exc_value, exc_tb):
                    msg += str(text)
                WaveEngine.OutputstreamHDL(str(msg), WaveEngine.MSG_ERROR)
            except Exception, e:
                # just incase the exception handler blows up
                print "ERROR:\n%s\n%s\n" % (str(msg), str(e))
            self.ExitStatus = 1
        self.CloseShop()
        return self.ExitStatus

    def getInfo(self):
        msg = """The Latency Per Hop test determines the latency of each hop through the mesh network for the system under test (SUT). The test allows you to present the SUT with an intended load (ILOAD) and measures the time that it takes for frames to be forwarded through each node in the SUT (latency)."""        
        
        return msg

    def getCharts(self):
        """
        Returns dictionary of all chart objects supported by this test.
        """
        self.ParseCVSdata(self.ResultsForCSVfile)
        
        
        # create charts
        charts = {}
        graphTypes = [GraphTypes.Jitter,GraphTypes.Average,GraphTypes.Minimum,GraphTypes.Maximum]
        
        #Create the Latency Graph
        #print "Shall create the Latency Graph"
        for eachGraphType in graphTypes:
            c = self.CreateLatencyGraph(640, 480, eachGraphType, self._LatencyList, self._LatencyData)
            t = c.title
            charts[ t ] = c
        return charts

################################### Flowables #################################
# These are unique objects that a placed in the Report.PDF file.
    def CreateLatencyGraph(self, GraphWidth, GraphHeight, DisplayValue, IndexList, Resultdata):
        if DisplayValue == GraphTypes.Maximum:
            graphTitle = "Maximum Latency"
        elif DisplayValue == GraphTypes.Minimum:
            graphTitle = "Minimum Latency"
        elif DisplayValue == GraphTypes.Average:
            graphTitle = "Average Latency"
        elif DisplayValue == GraphTypes.Jitter:
            graphTitle = "Average Jitter"
        else:
            graphTitle = "Unknown Parameter"
        
        #Find the Active hops
        ActiveHops   = []
        BarLabelList = []
        for (FrameSize, FrameRate, Node) in IndexList:
            if not Node in ActiveHops:
                ActiveHops.append(Node)
            IndexKey = (FrameSize, FrameRate)
            if not IndexKey in BarLabelList:
                BarLabelList.append(IndexKey)
        
        # Sort the Node ID based on the Hops
        hopCntDict = {}
        for nodeId in ActiveHops:
            hopCnt = self.meshNumOfHopsDict[nodeId]
            if hopCntDict.has_key(hopCnt) == False:
                hopCntDict[hopCnt] = []
            hopCntDict[hopCnt].append(nodeId)
        hopCntKeys = hopCntDict.keys()
        hopCntKeys.sort()
        ActiveHops   = []
        for hopCntKey in hopCntKeys:
            for nodeId in hopCntDict[hopCntKey]:
                ActiveHops.append(nodeId)
            
        #ActiveHops.sort()

        FrameSizeData = []
        for eachHop in ActiveHops:
            _data = ()
            for (FrameSize, FrameRate) in BarLabelList:
                Index = (FrameSize, FrameRate, eachHop)
                (LatencyMin, LatencyMax, LatencyAvg, Jitter, Count) = Resultdata[Index]
                if DisplayValue == GraphTypes.Maximum:
                    _data += (float(LatencyMax), )
                elif DisplayValue == GraphTypes.Minimum:
                    _data += (float(LatencyMin), )
                elif DisplayValue == GraphTypes.Average:
                    _data += (float(LatencyAvg) / float(Count), )
                elif DisplayValue == GraphTypes.Jitter:
                    _data += (float(Jitter) / 1000000.0 / float(Count), )
                else:
                    _data += (int(Count), )
            FrameSizeData.append(_data)

        FrameSizeName = []
        for (FrameSize, FrameRate) in BarLabelList:
            FrameSizeName.append("%d bytes @\n%spkt/sec" % (FrameSize, Float2EngNotation(FrameRate, self.DisplayPrecision)) )
        
        return self.LatencyGraph(GraphWidth, GraphHeight, FrameSizeName, FrameSizeData, ActiveHops, graphTitle, self.meshNumOfHopsDict)

    class LatencyGraph(FlowableGraph):
        def __init__(self, width, height, names, bar, HopLegend, title, meshNumOfHopsDict):
            FlowableGraph.__init__(self, width, height)
            self.dataNames = names
            self.dataBar   = bar
            self.HopLegend = HopLegend
            self.offset    = (defaultPageSize[0] - 2 * inch - width) / 2.0
            self.title     = title
            self.meshNumOfHopsDict = meshNumOfHopsDict
            
        def _customSecondsLabelFormat( self, value ):
            return str( "%ss" % Float2EngNotation( value, 2 ) )
            
        def _rawDraw(self, x, y):
            from reportlab.lib import colors 
            from reportlab.graphics.shapes import Drawing, Line, String, STATE_DEFAULTS
            from reportlab.graphics.charts.linecharts import HorizontalLineChart, Label
            from reportlab.graphics.charts.barcharts  import VerticalBarChart
            from reportlab.graphics.widgets.markers import makeMarker
            
            self.originX = x
            self.originY = y
            self._setScale([self.dataBar])
            (x1, y1, Width, Height) = self._getGraphRegion(x, y)

            #Build the graph
            self.drawing = Drawing(self.width, self.height)

            #Size of the Axis
            SizeXaxis = 14
            
            SizeYaxis = 0.0
            for n in range(int(self.valueMax / self.valueStep) + 1):
                eachValue  = self.valueMin + n * self.valueStep
                textString = self._customSecondsLabelFormat( eachValue )
                SizeYaxis  = max(SizeYaxis, self._stringWidth(textString, STATE_DEFAULTS['fontName'], STATE_DEFAULTS['fontSize']) )

            bc = VerticalBarChart()
            SizeYaxis += bc.valueAxis.tickLeft
            bc.y = y1 - y + SizeXaxis
            bc.height = Height - SizeXaxis
            self.graphCenterY = bc.y + bc.height/2

            if self.validData:
                # add valid data
                bc.x = x1 - x + SizeYaxis
                bc.width  = Width  - SizeYaxis
                bc.data = self.dataBar
                bc.categoryAxis.categoryNames = self.dataNames
                # axis values
                bc.valueAxis.valueMin  = self.valueMin
                bc.valueAxis.valueMax  = self.valueMax + self.valueStep
                bc.valueAxis.valueStep = self.valueStep
                self.graphCenterX = bc.x + bc.width/2
                # Add the label above bars if the number of bars <= 18
                if len(self.dataBar) * len(self.dataNames) <= 18:
                    # add value labels above bars
                    bc.barLabelFormat = self._customSecondsLabelFormat
                    bc.barLabels.dy = 0.08*inch
                    bc.barLabels.fontSize = 6
            else:
                # no valid data
                SizeYaxis = 16
                bc.x = x1 - x + SizeYaxis
                bc.width  = Width  - SizeYaxis
                self.graphCenterX = bc.x + bc.width/2
                bc.data = [ (0, ), ]
                bc.categoryAxis.categoryNames = [ '' ]
                bc.valueAxis.valueMin  = 0
                bc.valueAxis.valueMax  = 1
                bc.valueAxis.valueStep = 1
                Nodata = Label()
                Nodata.fontSize = 12
                Nodata.angle = 0
                Nodata.boxAnchor = 'c'
                Nodata.dx = self.graphCenterX
                Nodata.dy = self.graphCenterY
                Nodata.setText("NO VALID DATA")
                self.drawing.add(Nodata)
                
            # chart formatting
            colorList = Qlib.colorList              
            
            for n in range(len(self.dataBar)):    
                bc.bars[n].fillColor = colorList[n]
            bc.valueAxis.labelTextFormat = self._customSecondsLabelFormat
            bc.categoryAxis.labels.boxAnchor = 'c'
            bc.categoryAxis.labels.dx    = 0
            bc.categoryAxis.labels.dy    = -10
            bc.categoryAxis.labels.angle = 0
            bc.categoryAxis.labels.fontSize = 8
            # add chart
            self.drawing.add(bc)

            # Add Legend in upper right corner
            legendHeight  = 9 
            legendWidth = 90
            legendX = bc.x + 5
            legendY = bc.y + bc.height - 4 #12

            #Adjust the labels to be the center of the graph
            self._drawLabels(self.title, "", "")
                            
            if self.validData:
                for n in range(len(self.dataBar) ):
                    self.drawing.add(Line(legendX, legendY + 3 , legendX + 10, legendY + 3, strokeColor=bc.bars[n].fillColor, strokeWidth=3 ))
                    hopLgnd = "%s Hop:%d" % (self.HopLegend[n], self.meshNumOfHopsDict[self.HopLegend[n]])
                    self.drawing.add(String(legendX + 12, legendY, hopLgnd, fontName='Helvetica', fontSize=8))
                    #legendY -= legendHeight   
                    legendX += (5 * len(hopLgnd)) + 5 #legendWidth   
                    if legendX > 400:
                        legendX = bc.x + 5
                        legendY -= legendHeight
            # all done

##################################### Main ###################################
if __name__=='__main__':
    # Commandline execution starts here
        
    # set up options parser.  -h or --help will print usage.
    usage = "usage: %prog [options] -f FILENAME"
    parser = OptionParser( usage )
    parser.add_option("-f", "--file", dest="filename",
                    help="read configuration from FILE", metavar="FILE")
    parser.add_option("-q", "--quiet",
                    action="store_true", dest="quietmode", default=False,
                    help="don't print status messages to stdout")
    parser.add_option("-s", "--script",
                    action="store_true", dest="scriptmode", default=False,
                    help="don't run interactively")
    parser.add_option("-t", "--trials",
                    action="store", type="int", dest="trials", default=0,
                    help="override number of trials")
    (options, args) = parser.parse_args()
    # ...args is a list of extra arguments, like a wml config file.
    # options.scriptmode = True/False
    # options.quietmode = True/False
    # options.filename = string
    
    # Create the test
    userTest = Test()

    WaveEngine.SetOutputStream(PrintToConsole)
    if options.filename != None:
        userTest.loadFile( options.filename )
        
    # override options if we need to
    if options.trials:
        userTest.setTrials( options.trials )

    # Run the test
    userTest.run()
    sys.exit(userTest.ExitStatus)            

#unicast_packet_loss
#
# Objective: measure the forwarding rate and frame loss at different
#            loads and frames sizes
#
import os, sys, time
from basetest import *
import WaveEngine
from CommonFunctions import *
from optparse import OptionParser
from vcl import *

class Test( BaseTest ):
    def __init__(self):
        BaseTest.__init__(self)
        ############# Hardware definition ####################
        """
        The CardMap defines the WaveBlade ports that will be available for the test.
        Field Definitions:                                                     
          PortName -    Name given to the specified WaveBlade port. This is a user defined name. 
          ChassisID -   The WT90/20 Chassis DNS name or IP address. Format: 'string' or '0.0.0.0'
          CardNumber -  The WaveBlade card number as given on the Chassis front panel.
          PortNumber -  The WaveBlade port number, should be equal to 0 for current cards. 
          Channel -     WiFi channel number to use on the port. 
          Autonegotiation - Ethernet Autonegotiation mode. Valid values: 'on', 'off', 'forced'.
          Speed -       Ethernet speed setting if not obtained by autonegotiation. Valid values: 10, 100, 1000
          Duplex -      Ethernet Duplex mode if not obtained by autonegotiation. Valid values: 'full', 'half'
        Field Format: dictionary
          For Wifi Cards - 
              <PortName>: ( <ChassisID>, <CardNumber>, <PortNumber>, <Channel> ),
          For Ethernet Cards - 
              <PortName>: ( <ChassisID>, <CardNumber>, <PortNumber>, <autoNegotiation>, <speed>, <duplex> ),
        """
        self.CardMap = { 'WT90_E1': ( 'wt-tga-11-1d', 1, 0, 'on', 100, 'full' ),
                         'WT90_W1': ( 'wt-tga-11-1d', 2, 0,  1 )
                       }
                            
        ############# Description of Client setups #######################
        """             
        ClientOptions defines the options available when setting up clients
        Field Definitions:
          PhyRate -   The 802.11 phy rate to apply to all data frames originating from the client.
                      Valid values are all legally defined values
          Sifs -      (optional) Short Interframe Space Value. Units: microseconds
          SlotTime -  (optional) Units: microseconds
          AckTimeout -(optional) Time to wait for an ACK before starting a retry. Units: microseconds
        Field Format: dictionary
          'PhyRate': <rate>, 'Sifs': <sifsValue>, 'SlotTime': <slotValue>, 'AckTimeout': <AckTimeouValue>          
        """
        self.ClientOptions = {'PhyRate': 54, 'Sifs': 16, 'SlotTime': 9, 'AckTimeout': 350}

        """
        Security Options is dictionary of passed security parameters.  It has a mandatory key of 'Method'
        and optional ekys depending upon the particular security chose.  Some common one defined:
        """
        Security_None = {'Method': 'NONE'}
        Security_WEP  = {'Method': 'WEP-OPEN-128', 'KeyId': 0, 'NetworkKey': '00:00:00:00:00:00' }
        Security_WPA2 = {'Method': 'WPA2-EAP-TLS', 'Identity': 'anonymous', 'Password' : 'whatever'}

        """
        To setup clients for the test they will be placed into client groups. Each group is assigned to
        a logical port. Many different client groups can be defined and a port may have more than one group
        assigned to it. The client groups are divided between source(orginating traffic) and destination
        (receiving traffic). 
        Field Definitions:
          GroupName -  User defined name given to the client Group
          PortName -   Logical port name defined the CardMap.
          BSSID/SSID - The BSSID or SSID to which this client group will associate. BSSID will be in 
                       the form 00:11:22:33:44:55. SSID will be an ASCII text string. A BSSID of '00:00:00:00:00:00'
                       tells the system to pick the first on on the list
          MACaddress - The MAC address to use. Using the word 'DEFAULT' wiil cause a unique address to be
                       generated by the system. 
          IPaddress -  The Base IP address to use for this client group. Individual addresses for each client
                       in the group will be derived from the base IP address. An address of 0.0.0.0 implies that
                       DHCP will be used to obtain the client IP address. 
          SubNet    -  SubNet mask 
          Gateway -    Gateway address. 
          IncrTuple -  This is tuple of three values in the form (<count>, <MacIncrByte>, <IpIncrByte>). <count>
                       is the number of clients to create, <MacIncrByte> is the byte in the six byte MAC address
                       to increment (e.g. 00:00:00:00:10:02); Use the keyword 'DEFAULT' for automatic MAC incrementing.
                       <IpIncrByte> is the byte in the four byte IP address to increment (e.g. 0.0.0.1 will increment the
                       last byte by 1). 
                       NOTE: An empty tuple - () means that just one client is being defined. 
          Security -   Name of security policy to use for this client group. 'NONE' will cause open security. 
                       Security policies only apply to WiFi clients. 
          Options -    Reference to a client option list as defined above. 
        Field Format: a list of tuples
          ( <GroupName>, <PortName>, <BSSID/SSID>, <MACaddress>, <IPaddress>, <SubNet>, <Gateway>, ( <IncrTuple> ), Security, <options> ),
          ( <GroupName2>, <PortName2>, <BSSID/SSID>, <MACaddress2>, <IPaddress2>, <SubNet2>, <Gateway2>, ( <IncrTuple2> ), Security2, <options2> )
        """        
        self.SourceClients = [('ClientEth', 'WT90_E1', '00:00:00:00:00:00', 'DEFAULT', '192.168.1.10',  '255.255.255.0', '192.168.1.1', (), Security_None, self.ClientOptions )]
        self.DestClients   = [('ClientUno', 'WT90_W1', '00:00:00:00:00:00', 'DEFAULT', '192.168.1.100', '255.255.255.0', '192.168.1.1', (), Security_None, self.ClientOptions )]

        ################### First Level Test Parameters ##########################
        """
        The parameters in this group need to be set by the user to define the primary
        test configuration. 
        FrameSizeList - List of frame sizes to use in performing the test. This is the
                        primary parameter used in reporting results. Units: bytes 
        ILOADlist -     List of intended loads. The intended load is expressed in frames/sec, 
                        and is applied at the port level. The port load is divided equally 
                        between all source clients on a port. Units: frames/second
        Trials -        The number of unique trials to attempt for each combination of the above parameters.
        TransmitTime -  This is the amount of time for a test iteration to execute. RFC2544 recommends a time from
                        30-240 seconds. Units: seconds. 
        AgingTime -     The number of seconds the DUT/SUT needs to recover between each iteration.  Normally set to
                        zero unless the DUT/SUT resets during the iteration and needs some extra time to recover.
        """
        self.FrameSizeList  = [ 128, 256, 1024 ]
        self.ILOADlist      = [ 100, 500 ]
        self.Trials         =  1  
        self.TransmitTime   = 10
        self.AgingTime      =  0 

         ##################  Goal Seeking parameters  ##############################
        """
        The goal seeking parameters are used to define how the goal seeking algorithm will arrive at a solution.
        SearchMinimum -           The lower boundry for the goal seeking algorthim.  The algorthim will not search for
                                  values less than this.  Unit is in number of clients.
        SearchMaximum -           The upper boundry for the goal seeking algorthim.  The algorthim will not search for
                                  values higher than this.  The binary search algorithm will use this as the inital value.
                                  If it passed, then the test is complete.  Otherwise the next value is half way between
                                  the SearchMinimum and SearchMaximum. Unit is in number of clients.
        SearchResolutionAbsolute -Determines how precise the search for the final result needs to be. 
        SearchAcceptLossPercent - Determines how much packet loss will be acceptable in seeking the throughput result. 
                                  Ordinarily, throughput is defined as the maximum forwarding rate with zero frame loss.
                                  However, since 802.11 is a lossy medium it may not be possible in some circumstances to
                                  achieve zero frame loss. This parameter can be used in those situations to allow the search
                                  process to obtain the throughput goal. 
        """
        self.SearchMinimum           = None
        self.SearchMaximum           = None
        self.SearchResolutionPercent = 1
        self.SearchAcceptLossPercent = 0.0
        
        ###################### Logging Parameters #################################
        """
        These parameters determine the how the output of the test is to be formed. 
        CSVfilename -       Name of the output file that will contain the primary test results. This file will be in CSV format.
                            This name can include a path as well. Otherwise the file will be placed at the location of the calling
                            program. 
        ReportFilename -    Name of the output file that will contain a formatted report with graphs, explainations, diagrams and
                            the CSV data.  This file is in PDF format. This name can include a path as well. Otherwise the file will
                            be placed at the location of the calling program.
        LoggingDirectory -  Location for putting the remaining test results files.
        SavePCAPfile -      Boolean True/False value. If True a PCAP file will be created containing the detailed frame data that
                            was captured on each WT-20/90 port. 
        DetailedFilename -  Name of the file for capturing the raw test details.  This file will be put in the LoggingDirectory. 
        """
        self.CSVfilename      = 'Results_unicast_packet_loss.csv'
        self.ReportFilename   = 'Report_unicast_packet_loss.pdf'
        self.LoggingDirectory = "logs"
        self.SavePCAPfile     = False
        self.DetailedFilename = 'Detailed_unicast_packet_loss.csv'
        self.RSSIFilename    = 'RSSI_unicast_packet_loss.csv'
        
        ####################### Timing parameters ################################
        """
        These parameters will effect the performance of the test. They should only be altered if a specific
        problem is occuring that keeps the test from executing with the DUT. 
        
        LearningTime -      Amount of time to spend sending learning frames. 
        SettleTime -        Amount of time the test will wait for activity to settle or propagate through the SUT
                            before taking the measurements. Units: seconds
        BSSIDscanTime -     Amount of time to allow for scanning during the BSSID discovery process. Units: seconds
        AssociateRate -     The rate at which the test will attempt to associate clients with the SUT. This includes the time
                            required to complete .1X authentications. 
                            Units: associations/second. Type: float
        AssociateRetries -  Number of attempts to retry the complete association process for each client in the test.
        AssociateTimeout -  Amount of time the test will wait for a client association to complete before considering iteration
                            a failed connection. Units: seconds; Type: float
        ARPRate -           The rate at which the test will attempt issue ARP requests during the learning phase. 
                            Units: ARPs/second; Type: float
        ARPRetries -        Number of attempts to retry any give ARP request before considering the ARP a failure. 
        ARPTimeout -        Amount of time the test will wait for an ARP response before retrying or failing.
        UpdateInterval -    Interval at which the test will attempt to update test status back to the display console. 
                            Units: seconds
        DisplayPrecision -  Number of decimal places to use in reporting results. 
        """
        self.LearningTime   =   2
        self.SettleTime     =   2
        self.BSSIDscanTime     =   1.5
        self.AssociateRate     =  10.0
        self.AssociateRetries  =   0
        self.AssociateTimeout  =   5.0
        self.ARPRate           =  10.0
        self.ARPRetries        =   3
        self.ARPTimeout        =  10.0
        self.UpdateInterval    =  0.5
        self.DisplayPrecision  =   3

        #################  Flow parameters  #################################
        """
        These parameters determine the type of data frames and flows to be used in the test. 
        
        FlowOptions - Dictionary of options used to configure data flows. 
        Field Definitions:
          Type - Packet or frame type. Valid values: 'UDP', 'TCP', 'IP', 'ICMP', 
        """
        self.FlowOptions    = {'Type': 'UDP', 'PhyRate': 54 }
        self.BiDirectional  = False

########################## DO NOT MODIFY BELOW HERE ##########################
        # Include the version 
        self.version = '$Revision: 1.6 $' 
        self.date    = '$Date: 2007/06/25 23:57:40 $' 
        # FIXME - Ask Carl why moved it here.  
        self.FlowMap = WaveEngine.CreateFlows_Pairs
    
    def getTestName(self):
        
        return 'unicast_client_capacity'
    
    def loadData( self,
                  waveChassisStore,
                  wavePortStore,
                  waveClientTableStore,
                  waveSecurityStore,
                  waveTestStore,
                  waveTestSpecificStore,
                  waveMappingStore ):
        """
        Load dictionary data into test.
        Raise exception on error
        """
    
        # load data into base class
        BaseTest.loadData( self,
                           waveChassisStore,
                           wavePortStore,
                           waveClientTableStore,
                           waveSecurityStore,
                           waveTestStore,
                           waveTestSpecificStore,
                           waveMappingStore )
        #These are the test specific parameters that get passed down from the GUI for the test execution
        iLoadlist = []
        frameSizeList = []
        iLoadList = waveTestSpecificStore['unicast_packet_loss']['ILoadList']
        frameSizeList = waveTestSpecificStore['unicast_packet_loss']['FrameSizeList']
        if (len(iLoadList) != 0):
            self.ILOADlist = []
            for eachILoadValue in iLoadList:
                self.ILOADlist.append(int(eachILoadValue))
        if (len(frameSizeList) != 0):
            self.FrameSizeList = []
            for eachFrameSize in frameSizeList:
                self.FrameSizeList.append(int(eachFrameSize))
        # all good
        return True

    def PrintRealtimeStats(self, TXstate, Timeleft, ElapsedTime, PassedParameters ):
        TotalTX = 0
        TotalRX = 0
        PktType = PassedParameters['Type'] 
        for Portname in PassedParameters['CardList']:
            WaveEngine.VCLtest("stats.read('%s')" % (Portname), globals())
            if PktType == 'TCP':
                TotalTX += stats.txTcpFramesOkRate
                TotalRX += stats.rxTcpPacketsOkRate
            elif PktType == 'UDP':
                TotalTX += stats.txUdpFramesOkRate
                TotalRX += stats.rxUdpPacketsOkRate
            else:
                TotalTX += stats.txIpPacketsOkRate
                TotalRX += stats.rxIpPacketsOkRate
        ILOADtext = Float2EngNotation(float(PassedParameters['ILOAD']) , self.DisplayPrecision)
        OLOADtext = Float2EngNotation(TotalTX , self.DisplayPrecision)
        FRtext    = Float2EngNotation(TotalRX , self.DisplayPrecision)
        WaveEngine.OutputstreamHDL("\rILOAD=%spkts/sec, OLOAD=%spkts/sec, FR=%spkts/sec, (%2s %4.1f secs)" % (ILOADtext, OLOADtext, FRtext, TXstate, ElapsedTime), WaveEngine.MSG_OK)
        return True

    def startTest(self, FuncRealTime):
        self.ResultsForCSVfile.append( ('Frame Size', 'ILOAD', 'Trial', 'Theoretical Rate pkts/sec', 'Theoretical Rate bits/sec', 'OLOAD', 'Forwarding Rate pkts/sec', 'Forwarding Rate bits/sec', 'Frame Loss Rate') )
        for eachSize,eachILOAD in map(None,self.FrameSizeList,self.ILOADList):
            for TrialNumber in range(1, 1 + self.Trials):
                SearchLogic = WaveEngine.BinarySerach()
                if self.SearchMinimum:
                    if isnum(self.SearchMinimum):
                        _minimum = int(self.SearchMinimum) 
                    else:
                        _minimum = 1
                        WaveEngine.OutputstreamHDL("Warning: Can not understand minimum rate of '%s', using default.\n" % (self.SearchMinimum), WaveEngine.MSG_WARNING)
                else:
                    _minimum = 1
                if self.SearchMaximum:
                    if isnum(self.SearchMaximum):
                        _maximum = int(self.SearchMaximum) 
                    else:
                        _maximum = 255
                        WaveEngine.OutputstreamHDL("Warning: Can not understand maximum rate of '%s', using default.\n" % (self.SearchMaximum), WaveEngine.MSG_WARNING)
                else:
                    # This is changed for VPR 2919 - The DUT was dying if offerered too much traffic
                    _maximum =  255
                SearchLogic.minimum(_minimum)
                SearchLogic.maximum(_maximum)
                SearchLogic.SearchResolutionAbsolute(1)
                
                while SearchLogic.searching():
                    numClients = int(SearchLogic.query())
                    for fgname in flowGroup.getNames():
                        action.stopFlowGroup(fgname)
                        flowGroup.destroy(fgname)
                        #Debug statement...needs to be removed later
                        print "Destroyed flow group ",fgname
                    for flowname in flow.getNames():
                        flow.destroy(flowname)
                        #Debug statement...needs to be removed later
                        print "Destroyed flow ",flowname
                    for name in mc.getNames():
                        mc.deauthenticate(name, 1) 
                        mc.destroy(name)
                        #Debug statement...needs to be removed later
                        print "Destroyed mobile client ",name
                    #Recompute the min and max number of clients as per the binary search
                    self.createClients()
                    status = self.connectClients()
                    if status < 0:
                        SearchLogic.FAIL()
                        continue
                    self.configureFlows()
                    self.setQoShandshakeFlag()
                    self.doArpExchanges()
                    FrameRate = float(eachILOAD)
                    FrameSize = int(eachSize)
                    FrameRatePerPort = FrameRate / float(len(self.FlowList))
                    TheoreticalMFR = WaveEngine.SUTtheoreticalThroughput(self.ListOfClients, self.FlowList, '--', FrameSize, self.FlowOptions['PhyRate'])
                    WaveEngine.ModifyFlows(self.FlowList, {'FrameSize': FrameSize, 'IntendedRate': FrameRatePerPort , 'NumFrames': WaveEngine.MAXtxFrames, 'RateMode': 'pps'})
                    WaveEngine.ClearAllCounter(self.CardList)
                    WaveEngine.OutputstreamHDL("\nTrial %d: Transmitting %s byte frames at %spkts/sec\n" % (TrialNumber, FrameSize, Float2EngNotation(FrameRate, self.DisplayPrecision)), WaveEngine.MSG_OK)
                    WaveEngine.WriteDetailedLog([''])
                    WaveEngine.WriteDetailedLog(['FrameSize:', FrameSize, 'ILOAD:', FrameRate, 'Trial:', TrialNumber])
                    time.sleep(0.8)
                    PassedParam = { 'ILOAD': FrameRate, 'CardList': self.CardList, 'Type': self.FlowOptions['Type']}
                    retVal = self._transmitIteration(self.TransmitTime, self.SettleTime, self.UpdateInterval, "XmitGroup", True, FuncRealTime, PassedParam)
                    if retVal:
                        self.TransmitTime = retVal
                    WaveEngine.OutputstreamHDL("\n", WaveEngine.MSG_OK)
                    # This is a hack since flows counter do not work with less than 64 byte frames
                    if FrameSize < 64:
                        (OLOAD, OLOAD_bps, FR, FR_bps, FrameLossRate) = WaveEngine.MeasurePort_OLOAD_FR_LOSSRate(self.CardList, self.TransmitTime, self.FlowOptions['Type'])
                    else:
                        (OLOAD, OLOAD_bps, FR, FR_bps, FrameLossRate) = WaveEngine.MeasureFlow_OLOAD_FR_LossRate(self.FlowList, self.TransmitTime)
                    self.ResultsForCSVfile.append( (FrameSize, FrameRate, TrialNumber, TheoreticalMFR, TheoreticalMFR * 8 * FrameSize, OLOAD, FR, FR_bps, FrameLossRate) )
                    WaveEngine.OutputstreamHDL("Completed: Forwarding rate for %d byte frames is %.1f (or %s bits/sec)\n" % (FrameSize, FR, Float2EngNotation(FR_bps, self.DisplayPrecision)), WaveEngine.MSG_SUCCESS)
                    if FrameLossRate > self.SearchAcceptLossPercent:
                        WaveEngine.OutputstreamHDL("Completed: Frame Loss Rate is %.2f%%\n, shall have to recompute the number of clients" % (FrameLossRate), WaveEngine.MSG_SUCCESS)
                        SearchLogic.FAIL()
                    else:
                        SearchLogic.PASS()
                    # Certain DUT do not like the constant traffic
                    if self.AgingTime > 0:
                        WaveEngine.Sleep(self.AgingTime, 'DUT/SUT recovery time,')
                               
                # Print results for that frame size
                if SearchLogic.neverpassed:
                    self.ResultsForCSVfile.append( (FrameSize, TrialNumber , TheoreticalMFR, TheoreticalMFR * 8 * FrameSize, 0, 0, 0 ) )
                    WaveEngine.OutputstreamHDL("Error: Framesize=%d failed every pass. No throughput measurement.\n" % (int(FrameSize)), WaveEngine.MSG_ERROR)
                else:
                    self.ResultsForCSVfile.append( (FrameSize, TrialNumber, TheoreticalMFR, TheoreticalMFR * 8 * FrameSize, MaxILOAD, Tput, TputBPS ) )
                    WaveEngine.OutputstreamHDL("Completed: Throughput for %d byte packets is %.1f pkts/sec (or %s bits/sec)\n" % (int(FrameSize), Tput, Float2EngNotation(TputBPS, self.DisplayPrecision)), WaveEngine.MSG_SUCCESS)

    def PrintReport(self):
        import os.path
        #Strip off the DUT info
        Results = []
        flag = False
        for line in self.ResultsForCSVfile:
            if flag:
                Results.append(line)
            if len(line) == 0:
                flag = True
        # Text Paragraphs
        Overview= "The Packet Loss test measures the rate at which packets are lost and forwarded "\
                  "by the system under test when presented with a specific intended load. The test "\
                  "can be run using a number of different intended loads and with varying frame "\
                  "sizes."
        FR_text1= "The forwarding rate graph compares the amount of traffic that the SUT can "\
                  "successfully forward against the traffic load that is actually offered to the "\
                  "SUT. These values are compared against the theoretical maximum forwarding rate "\
                  "that can be achieved. The ideal result is obtained when the forwarding rate "\
                  "equals offered load. All values are measured in Mbps. Each graph represents a "\
                  "single the results for a single ILOAD."
        FR_text2= "The packet loss graph shows the percentage of packets that are dropped by the "\
                  "SUT. Ideally no packet loss will occur until the offered load reaches the "\
                  "theoretical maximum. "
        Method1 = "This test allows the user to present the system under test (SUT) with a specific "\
                  "intended load (ILOAD) and measure the response in terms of forwarding rate and "\
                  "loss packets. The ILOAD is set as frames/sec offered to the SUT. If multiple "\
                  "clients are involved in the test then the ILOAD is divided evenly between the clients "\
                  "sourcing traffic into the SUT. The user may specify a variety of ILOAD "\
                  "conditions and the test will produce the measured results for each ILOAD."
        Method2 = "The traffic load is presented to the SUT unidirectionally, and may be set to "\
                  "flow from the WLAN port to an ethernet port, or from ethernet to WLAN. "\
                  "Optionally, traffic can be established between WLAN ports. The test can be "\
                  "configured to involve multiple WLAN ports (APs), in which case the ILOAD is "\
                  "evenly distributed between all APs involved in the test."
        Method3 = "Forwarding rate is measured by counting the number of packets that have been "\
                  "successfully received at the destination port(s) over the course of the test. "\
                  "Packet loss is calculated by taking the difference between the offered packets "\
                  "and the successfully forwarded packets. Veriwave uses specially tagged packets "\
                  "to count these packets."
        Method4 = "Prior to the start of the actual test the WaveTest system connects all WLAN "\
                  "clients to their respective APs. This process includes the necessary security "\
                  "protocols. After successful connections, the clients perform standard ARP "\
                  "requests to determine the destination or gateway MAC address."

        MyReport = WaveReport(os.path.join(self.LoggingDirectory, self.ReportFilename))
        if MyReport.Story == None:
            # Reportlab is not installed, no use creating a file
            return
        MyReport.Title("Unicast Packet Loss Report", self.DUTinfo)
        MyReport.InsertHeader("Overview")
        MyReport.InsertParagraph(Overview)
        MyReport.InsertHeader("Forwarding Rate")
        MyReport.InsertParagraph(FR_text1)
        for eachILOAD in self.ILOADlist:
            MyReport.InsertObject(self.CreateForwardingRateGraph(eachILOAD, Results))
        MyReport.InsertHeader("Frame Loss Rate")
        MyReport.InsertParagraph(FR_text2)
        for eachILOAD in self.ILOADlist:
            MyReport.InsertObject(self.CreateFrameLossRateGraph(eachILOAD, Results))
        MyReport.InsertHeader("Test Configuration")
        ConfigParamters = [('Parameter', 'Value', 'Description'),
                           ('Learning Time', "%d secs" % (self.LearningTime),  'The number of seconds to transmit frames for the DUT/SUT to populate its forwarding tables'),
                           ('Achieved Transmit Time', "%0.2f secs" % (self.TransmitTime), 'The number of seconds that the WaveTest transmitted at each iteration.'),
                           ('Settle Time', "%d secs" % (self.SettleTime), 'How many seconds to wait for the DUT/SUT to finish forwarding frames before making the final measurement'),
                           ('Trials', "%d" % (self.Trials), 'Number of times the measurement will be repeated.  Multiple trials are used for averaging the measurement.')]
        MyReport.InsertParameterTable(ConfigParamters, columns=[2*inch, 0.75*inch, 3.25*inch])
        MyReport.InsertHeader("Client Map")
        MyReport.InsertClientMap(self.SourceClients, self.DestClients, self.BiDirectional, self.CardMap)
        MyReport.InsertHeader("Methodology")
        MyReport.InsertParagraph(Method1)
        MyReport.InsertParagraph(Method2)
        MyReport.InsertParagraph(Method3)
        MyReport.InsertParagraph(Method4)
        MyReport.InsertPageBreak()
        MyReport.InsertHeader("Detailed Results")
        
        MyReport.InsertDetailedTable(Results, columns=[0.5*inch, 0.6*inch, 0.4*inch, 0.75*inch, 0.75*inch, 0.75*inch, 0.75*inch, 0.75*inch, 0.75*inch])
        # other info section
        MyReport.InsertHeader("Other Info")
        OtherParameters = []
        OtherParameters.append( ( 'Results Directory',  str( self.LoggingDirectory ) )  )
        for item in self.OtherInfoData.items():
            OtherParameters.append( item )
        OtherParameters.append( ( 'WaveTest Version',   str( action.getVclVersionStr() ) ) )
        MyReport.InsertGenericTable( OtherParameters , columns = [ 1.5*inch, 4.5*inch ] )
        # generate output
        MyReport.Print()
                    
    def run(self):
        # For debuging the reports
        #self.LoggingDirectory = "/home/keith/Veriwave/WaveApps/Results/20060324-110245"
        #self.ReadResults()
        #self.PrintReport() 
        #return
        
        #Configure the test which includes configure chassid,ports,create clients and create flows (Configure Stage)
        #Setup the clients which includes connect clients,ARP and DHCP
        WaveEngine.OpenLogging(Path=self.LoggingDirectory, Detailed=self.DetailedFilename)

        try:
            self.ExitStatus = 0
            self.configurePorts()
            self.initailizeCSVfile()
            self.VerifyBSSID_MAC()
            self.startTest(self.RealtimeCallback)
            self.SaveResults()
            if self.generatePdfReportF:
                self.PrintReport()
            #Update the csv results, pdf charts (if opted by the user) in the GUI
            #'Results' page
            self.updateGUIresultsPage()
        except WaveEngine.RaiseException:
            WaveEngine.OutputstreamHDL('\n', WaveEngine.MSG_OK)
            (exc_type, exc_value, exc_traceback) = sys.exc_info()
            WaveEngine.OutputstreamHDL(str(exc_value), WaveEngine.MSG_ERROR)
            self.ExitStatus = 2
            self.SaveResults()
        except Exception, e:
            # some other error occured
            try:
                WaveEngine.OutputstreamHDL(str(e), WaveEngine.MSG_ERROR)
            except Exception, e:
                print "ERROR: ", str(e)
            self.ExitStatus = 1
        self.CloseShop()
        return self.ExitStatus

    def getInfo(self):
        Method = "This test allows the user to present the system under test (SUT) with a specific "\
                 "intended load (ILOAD) and measure the response in terms of forwarding rate and "\
                 "loss packets. The ILOAD is set as frames/sec offered to the SUT. If multiple "\
                 "clients are involved in the test then the ILOAD is divided evenly between the clients "\
                 "sourcing traffic into the SUT. The user may specify a variety of ILOAD "\
                 "conditions and the test will produce the measured results for each ILOAD.\n"\
                 "The traffic load is presented to the SUT unidirectionally, and may be set to "\
                 "flow from the WLAN port to an ethernet port, or from ethernet to WLAN. "\
                 "Optionally, traffic can be established between WLAN ports. The test can be "\
                 "configured to involve multiple WLAN ports (APs), in which case the ILOAD is "\
                 "evenly distributed between all APs involved in the test.\n"\
                 "Forwarding rate is measured by counting the number of packets that have been "\
                 "successfully received at the destination port(s) over the course of the test. "\
                 "Packet loss is calculated by taking the difference between the offered packets "\
                 "and the successfully forwarded packets. Veriwave uses specially tagged packets "\
                 "to count these packets.\n"\
                 "Prior to the start of the actual test the WaveTest system connects all WLAN "\
                 "clients to their respective APs. This process includes the necessary security "\
                 "protocols. After successful connections, the clients perform standard ARP "\
                 "requests to determine the destination or gateway MAC address.\n"
        return Method
    
    def getCharts(self):
        """
        Returns dictionary of all chart objects supported by this test.
        { 'Frame Loss [ILOAD=100]': <obj>,
          'Frame Loss [ILOAD=200]': <obj>,
          'Latency [framesize=100, ILOAD=100]': <obj>,
          <chart title>, <chart object> }
        """
        
        # code from Jerry to strip off irrelevant headings
        results = []
        flag = False
        for line in self.ResultsForCSVfile:
            if flag:
                results.append(line)
            if len(line) == 0:
                flag = True
        # create charts
        charts = {}
        for iload in self.ILOADlist:
            c = self.CreateForwardingRateGraph( iload, results )
            t = c.title
            charts[ t ] = c
        for iload in self.ILOADlist:
            c = self.CreateFrameLossRateGraph( iload, results )
            t = c.title
            charts[ t ] = c
        
        return charts

################################### Flowables #################################
# These are unique objects that a placed in the Report.PDF file.
    def CreateForwardingRateGraph(self, DesiredFrameRate, ResultData):
        GraphWidth  = 6.0 * inch
        GraphHeight = 3.0 * inch

        #Extract the data from the CSV file
        _ExtractedData= {}
        for eachLine in ResultData:
            if len(eachLine) != 9:
                continue
            (FrameSize, FrameRate, TrialNumber, Theroy_FPS, Theroy_BPS, OLOAD_FPS, FR_FPS, FR_BPS, FrameLossRate) = eachLine
            if not isnum(FrameSize):
                continue
            if float(DesiredFrameRate) != float(FrameRate):
                continue
            if _ExtractedData.has_key(int(FrameSize)):
                (m,n, TotalOLOAD_FPS, TotalOLOAD_BPS, TotalFR_FPS, TotalFR_BPS, Count) = _ExtractedData[int(FrameSize)]
                _ExtractedData[int(FrameSize)] = (Theroy_FPS, Theroy_BPS, TotalOLOAD_FPS + OLOAD_FPS, TotalOLOAD_BPS + (OLOAD_FPS * 8 * FrameSize), TotalFR_FPS + FR_FPS, TotalFR_BPS + FR_BPS, Count + 1)
            else:
                 _ExtractedData[int(FrameSize)] = (Theroy_FPS, Theroy_BPS, OLOAD_FPS, (OLOAD_FPS * 8 * FrameSize), FR_FPS, FR_BPS, 1)
        FrameSizeList = _ExtractedData.keys()
        FrameSizeList.sort()
       
        graphTitle = "Forwarding Rate with %.1f pkts/sec offered" % (float(DesiredFrameRate))
        FrameSizeData1 = ()
        FrameSizeData2 = ()
        FrameSizeTheory = ()
        FrameSizeName = []
        if len(_ExtractedData) > 0:
            for eachFrameSize in FrameSizeList:
                (Theroy_FPS, Theroy_BPS, TotalOLOAD_FPS, TotalOLOAD_BPS, TotalFR_FPS, TotalFR_BPS, Count) = _ExtractedData[eachFrameSize]
                Theroy_Mbps = Theroy_BPS / 1000000.0
                OLOAD_Mbps  = TotalOLOAD_BPS  / (int(Count) * 1000000.0)
                FR_Mbps     = TotalFR_BPS  / (int(Count) * 1000000.0)
                FrameSizeData1   += (OLOAD_Mbps, )
                FrameSizeData2   += (FR_Mbps, )
                FrameSizeTheory += (Theroy_Mbps, )
                FrameSizeName.append(str(eachFrameSize))

        return self.ForwardingRateGraph(GraphWidth, GraphHeight, FrameSizeName, [FrameSizeTheory, ], [FrameSizeData1, FrameSizeData2], graphTitle)

    def CreateFrameLossRateGraph(self, DesiredFrameRate, ResultData):
        GraphWidth  = 6.0 * inch
        GraphHeight = 3.0 * inch

        #Extract the data from the CSV file
        _ExtractedData= {}
        for eachLine in ResultData:
            if len(eachLine) != 9:
                continue
            (FrameSize, FrameRate, TrialNumber, Theroy_FPS, Theroy_BPS, OLOAD_FPS, FR_FPS, FR_BPS, FrameLossRate) = eachLine
            if not isnum(FrameSize):
                continue
            if float(DesiredFrameRate) != float(FrameRate):
                continue
            if _ExtractedData.has_key(int(FrameSize)):
                (m,n, TotalLossRate, Count) = _ExtractedData[int(FrameSize)]
                _ExtractedData[int(FrameSize)] = (Theroy_FPS, Theroy_BPS, TotalLossRate + float(FrameLossRate), Count + 1)
            else:
                 _ExtractedData[int(FrameSize)] = (float(Theroy_FPS), float(Theroy_BPS), float(FrameLossRate), 1)
        FrameSizeList = _ExtractedData.keys()
        FrameSizeList.sort()
       
        graphTitle = "Frame Loss Rate with %.1f pkts/sec offered" % (float(DesiredFrameRate))
        
        FrameSizeData1 = ()
        FrameSizeName = []
        for eachFrameSize in FrameSizeList:
            (Theroy_FPS, Theroy_BPS, TotalLossRate, Count) = _ExtractedData[eachFrameSize]
            FrameLoss  = TotalLossRate  / int(Count)
            FrameSizeData1   += (FrameLoss, )
            FrameSizeName.append(str(eachFrameSize))
        return self.FrameLossRateGraph(GraphWidth, GraphHeight, FrameSizeName, [], [FrameSizeData1], graphTitle)

    class ForwardingRateGraph(FlowableGraph):
        """
        Forwarding Rate Graph
        """
        def __init__(self, width, height, names, line, bar, title):
            FlowableGraph.__init__(self, width, height)
            self.dataNames = names
            self.dataLine  = line
            self.dataBar   = bar
            self.offset    = (defaultPageSize[0] - 2 * inch - width) / 2.0
            self.title     = title

        def _rawDraw(self, x, y):
            from reportlab.lib import colors 
            from reportlab.graphics.shapes import Drawing, Line, String, STATE_DEFAULTS
            from reportlab.graphics.charts.linecharts import HorizontalLineChart, Label
            from reportlab.graphics.charts.barcharts  import VerticalBarChart
            from reportlab.graphics.widgets.markers import makeMarker
            self._setScale([self.dataLine, self.dataBar])
            (x1, y1, Width, Height) = self._getGraphRegion(x, y)

            #Build the graph
            self.drawing = Drawing(self.width, self.height)

            #Size of the Axis
            SizeXaxis = 14
            SizeYaxis = 0.0
            for n in range(int(self.valueMax / self.valueStep) + 1):
                eachValue = self.valueMin + n * self.valueStep
                SizeYaxis = max(SizeYaxis, self._stringWidth(str("%.1f Mbps" % eachValue), STATE_DEFAULTS['fontName'], STATE_DEFAULTS['fontSize']) )
                
            # Bar chart of measured data
            bc = VerticalBarChart()
            SizeYaxis += bc.valueAxis.tickLeft
            bc.x = x1 - x + SizeYaxis
            bc.y = y1 - y + SizeXaxis
            bc.height = Height - SizeXaxis
            bc.width  = Width  - SizeYaxis
            self.graphCenterX = bc.x + bc.width/2
            self.graphCenterY = bc.y + bc.height/2
            if self.validData:
                # add valid data to chart
                bc.data = self.dataBar
                bc.categoryAxis.categoryNames = self.dataNames
                # add value labels above bars
                bc.barLabelFormat = "%.2f"
                bc.barLabels.dy = 0.08*inch
                bc.barLabels.fontSize = 6
            else:
                # add message informing user there is no valid data
                bc.data = [ (0, ), ]
                bc.categoryAxis.categoryNames = [ '' ]
                Nodata = Label()
                Nodata.fontSize = 12
                Nodata.angle = 0
                Nodata.boxAnchor = 'c'
                Nodata.dx = self.graphCenterX
                Nodata.dy = self.graphCenterY
                Nodata.setText("NO VALID DATA")
                self.drawing.add(Nodata)
            
            # veriwave colors
            (R,G,B) = VeriwaveYellow
            bc.bars[0].fillColor   = colors.Color(R,G,B)
            # set axis ranges
            bc.valueAxis.valueMin  = self.valueMin
            bc.valueAxis.valueMax  = self.valueMax
            bc.valueAxis.valueStep = self.valueStep
            bc.valueAxis.labelTextFormat = "%.1f Mbps"
            # set axis labels
            bc.categoryAxis.labels.boxAnchor = 'ne'
            bc.categoryAxis.labels.dx = 8
            bc.categoryAxis.labels.dy = -2
            bc.categoryAxis.labels.angle = 0
            # add bar chart
            self.drawing.add(bc)

            #Put the labels on the center of the graph
            self._drawLabels(self.title, "Frame Size", "")

            # Add Legend in upper left corner
            legendHeight  = 9 
            legendX = bc.x + 5
            legendY = bc.y + bc.height - 12
            self.drawing.add(Line(legendX, legendY + 3 , legendX + 20, legendY + 3, strokeColor=bc.bars[0].fillColor, strokeWidth=3 ))
            self.drawing.add(String(legendX + 22, legendY, 'Offered Load', fontName='Helvetica', fontSize=8))
            legendY -= legendHeight
            self.drawing.add(Line(legendX, legendY + 3 , legendX + 20, legendY + 3, strokeColor=bc.bars[1].fillColor, strokeWidth=3 ))
            self.drawing.add(String(legendX + 22, legendY, 'Forwarding Rate', fontName='Helvetica', fontSize=8))
            legendY -= legendHeight

            # theoretical line chart
            if self.validData and len(self.dataLine[0]) > 0:
                # if one datapoint, draw horizontal line across chart
                DashArray = [2,2]
                if len(self.dataLine[0]) == 1:
                    yPos = bc.height * (self.dataLine[0][0] - bc.valueAxis.valueMin) / (bc.valueAxis.valueMax - bc.valueAxis.valueMin)
                    self.drawing.add(Line(bc.x, bc.y + yPos, bc.x + bc.width, bc.y + yPos, strokeColor=colors.red, strokeWidth=1, strokeDashArray = DashArray))
                # theoretical line
                lc = HorizontalLineChart()    
                lc.x = bc.x
                lc.y = bc.y
                lc.height = bc.height
                lc.width  = bc.width
                # line axis values
                lc.valueAxis.valueMin  = self.valueMin
                lc.valueAxis.valueMax  = self.valueMax
                lc.valueAxis.valueStep = self.valueStep
                lc.valueAxis.visible   = False
                lc.data = self.dataLine
                # line formatting
                lc.lines[0].strokeColor = colors.red
                lc.lines[0].strokeDashArray = DashArray
                lc.lines[0].symbol = makeMarker('FilledDiamond')
                lc.joinedLines = 1
                self.drawing.add(lc)
                # add legend
                self.drawing.add(Line(legendX, legendY + 3, legendX + 20 , legendY + 3, strokeColor=colors.red, strokeWidth=1, strokeDashArray=DashArray))
                self.drawing.add(String(legendX + 22, legendY, 'Theory', fontName='Helvetica', fontSize=8))
                legendY -= legendHeight
            # all done

    class FrameLossRateGraph(FlowableGraph):
        def __init__(self, width, height, names, line, bar, title):
            FlowableGraph.__init__(self, width, height)
            self.dataNames = names
            self.dataLine  = line
            self.dataBar   = bar
            self.offset    = (defaultPageSize[0] - 2 * inch - width) / 2.0
            self.title     = title

        def _rawDraw(self, x, y):
            from reportlab.lib import colors 
            from reportlab.graphics.shapes import Drawing, Line, String, STATE_DEFAULTS
            from reportlab.graphics.charts.linecharts import HorizontalLineChart, Label
            from reportlab.graphics.charts.barcharts  import VerticalBarChart 

            self._setScale([self.dataLine, self.dataBar])
            (x1, y1, Width, Height) = self._getGraphRegion(x, y)
            self.drawing = Drawing(self.width, self.height)

            #Size of the Axis
            SizeXaxis = 14
            SizeYaxis = 0.0
            for n in range(int(self.valueMax / self.valueStep) + 1):
                eachValue = self.valueMin + n * self.valueStep
                SizeYaxis = max(SizeYaxis, self._stringWidth("%.3f%%" % (eachValue), STATE_DEFAULTS['fontName'], STATE_DEFAULTS['fontSize']) )

            bc = VerticalBarChart()
            SizeYaxis += bc.valueAxis.tickLeft
            bc.x = x1 - x + SizeYaxis
            bc.y = y1 - y + SizeXaxis
            bc.height = Height - SizeXaxis
            bc.width  = Width  - SizeYaxis
            self.graphCenterX = bc.x + bc.width/2
            self.graphCenterY = bc.y + bc.height/2
            if self.validData:
                # add valid data to chart
                bc.data = self.dataBar
                bc.categoryAxis.categoryNames = self.dataNames
                # add value labels above bars
                bc.barLabelFormat = "%.2f"
                bc.barLabels.dy = 0.08*inch
                bc.barLabels.fontSize = 6
            else:
                # no valid data
                bc.data = [ (0,), ]
                bc.categoryAxis.categoryNames = [ '' ]
                Nodata = Label()
                Nodata.fontSize = 12
                Nodata.angle = 0
                Nodata.boxAnchor = 'c'
                Nodata.dx = self.graphCenterX
                Nodata.dy = self.graphCenterY
                Nodata.setText("NO VALID DATA")
                self.drawing.add(Nodata)
                
            # format chart
            (R,G,B) = VeriwaveYellow
            bc.bars[0].fillColor   = colors.Color(R,G,B)
            # axis values
            bc.valueAxis.valueMin  = self.valueMin
            bc.valueAxis.valueMax  = self.valueMax
            bc.valueAxis.valueStep = self.valueStep
            # axis formatting
            if self.valueStep >= 10.0:
                bc.valueAxis.labelTextFormat = "%.0f%%"
            elif self.valueStep >= 1.0:
                bc.valueAxis.labelTextFormat = "%.1f%%"
            elif self.valueStep >= 0.1:
                bc.valueAxis.labelTextFormat = "%.2f%%"
            else:
                bc.valueAxis.labelTextFormat = "%.3f%%"
            bc.categoryAxis.labels.boxAnchor = 'ne'
            bc.categoryAxis.labels.dx = 8
            bc.categoryAxis.labels.dy = -2
            bc.categoryAxis.labels.angle = 0

            self._drawLabels(self.title, "Frame Size", "Percent Loss")

            # What if all loss is Zero
            if self.valueMin == 0.0 and self.valueMax == self.valueStep and self.validData:
                bc.valueAxis.labelTextFormat = "%.3f%%"
                Label_Zero = Label()
                Label_Zero.fontSize = 12
                Label_Zero.angle = 0
                Label_Zero.dx = self.graphCenterX
                Label_Zero.dy = self.graphCenterY
                Label_Zero.boxAnchor = 'c'
                Label_Zero.setText("ALL DATA IS ZERO")
                self.drawing.add(Label_Zero)
            self.drawing.add(bc)
            # Add Legend in upper right corner
            legendHeight  = 9 
            legendX = bc.x + 5
            legendY = bc.y + bc.height - 12

            if len(self.dataLine) > 0 and self.validData:
                # if one datapoint, draw horizontal line across chart
                DashArray = [2,2]
                if len(self.dataLine[0]) == 1:
                    yPos = bc.height * (self.dataLine[0][0] - bc.valueAxis.valueMin) / (bc.valueAxis.valueMax - bc.valueAxis.valueMin)
                    self.drawing.add(Line(bc.x, bc.y + yPos, bc.x + bc.width, bc.y + yPos, strokeColor=colors.red, strokeWidth=1, strokeDashArray = DashArray))
                # theoretical line                           
                lc = HorizontalLineChart()    
                lc.x = bc.x
                lc.y = bc.y
                lc.height = bc.height
                lc.width  = bc.width
                # axis values
                lc.valueAxis.valueMin  = self.valueMin
                lc.valueAxis.valueMax  = self.valueMax
                lc.valueAxis.valueStep = self.valueStep
                lc.valueAxis.visible   = False
                lc.data = self.dataLine
                # dashed line with diamond markers
                lc.lines[0].strokeDashArray = [2,2]
                lc.lines[0].symbol = makeMarker('FilledDiamond')
                lc.joinedLines = 1
                self.drawing.add(lc)
                self.drawing.add(Line(legendX, legendY + 3, legendX + 20 , legendY + 3, strokeColor=lc.lines[0].strokeColor, strokeWidth=1, strokeDashArray = lc.lines[0].strokeDashArray))
                self.drawing.add(String(legendX + 22, legendY, 'Theory', fontName='Helvetica', fontSize=8))
                legendY -= legendHeight
            # all done
            
                
##################################### Main ###################################
if __name__=='__main__':
    # Commandline execution starts here
        
    # set up options parser.  -h or --help will print usage.
    usage = "usage: %prog [options] -f FILENAME"
    parser = OptionParser( usage )
    parser.add_option("-f", "--file", dest="filename",
                    help="read configuration from FILE", metavar="FILE")
    parser.add_option("-q", "--quiet",
                    action="store_true", dest="quietmode", default=False,
                    help="don't print status messages to stdout")
    parser.add_option("-s", "--script",
                    action="store_true", dest="scriptmode", default=False,
                    help="don't run interactively")
    parser.add_option("-t", "--trials",
                    action="store", type="int", dest="trials", default=0,
                    help="override number of trials")
    parser.add_option("-l", "--savelogs",
                    dest="logs", action="store_true", default=False,
                    help="save hardware logs after test")
    (options, args) = parser.parse_args()
    # ...args is a list of extra arguments, like a wml config file.
    # options.scriptmode = True/False
    # options.quietmode = True/False
    # options.filename = string
    # options.logs = True/False

    # Create the test
    userTest = Test()
    WaveEngine.SetOutputStream(PrintToConsole)
    if options.filename != None:
        userTest.loadFile( options.filename )
        
    # override options if we need to
    if options.trials:
        userTest.setTrials( options.trials )
    if options.logs:
        userTest.SavePCAPfile = True
    # Run the test
    userTest.run()
    sys.exit(userTest.ExitStatus)

- show_for @testcase do |s|
  = s.attribute :filename
  = s.attribute :updated_at, :format=>:short, :label => "Last update time"
  = s.association :testlink_user, :using => :username
  - s.attribute :testlink_project do
    - tp = TestlinkProject.where(:project_id => @testcase.testlink_project_id, :testlink_user_id => @testcase.testlink_user.id)[0]
    = tp ? tp.project_name : "Orphaned"
  = s.attribute :device_type
  = s.attribute :firmware_version
  = s.association :test_suite, :using => :suite_name, :if_blank => "Unassigned"
  - s.attribute :test_section do
    = @testcase.test_section[1..-1].join " -> "
  = s.attribute :step_count, :label => "Steps"
  - s.attribute :documentation do
    - step_count = 0
    %ol.documentation
      - @testcase.documentation.split('||').each do |doc|
        %li= Nokogiri::HTML(doc).search('//text()').text
  - s.attribute :test_results do
    - if @testcase.result.nil?
      %span{:class => TEST_STATES[0].downcase.gsub(' ', '_')}= TEST_STATES[0].gsub(' ', '_')
    - else
      <span class='#{TEST_STATES[@testcase.result].downcase.gsub(' ', '_')}'>#{"#{TEST_STATES[@testcase.result]}: #{@testcase.test_results || 'No reason received yet.'}"}
  = s.attribute :test_log_location, :if_blank => "Not tested yet." if @testcase.test_results
  - s.attribute :reported do
    = @testcase.reported ? "Result reported" : "Not reported"
  - end if TEST_STATES[@testcase.result].match(/failed|passed/i) unless @testcase.result.nil?
  - s.attribute :testlink_report_response do
    = @testcase.testlink_report_response
  - end unless @testcase.testlink_report_response.nil?
= simple_form_for(@testcase) do |f|
  = f.input :result, :label => "Override result state: ", :collection => OVERRIDE_STATES
  = f.input :test_results, :label=>"Reason: "
  = f.button :submit
%nav.back_link
  = link_to 'Back', request.headers['HTTP_REFERER']
%nav.secondary_nav
  = link_to "Delete Test Case", @testcase, :confirm => 'Are you sure?', :method => :delete
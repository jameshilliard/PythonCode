# $Id: advanced.txt,v 1.2 2007/04/04 01:46:45 wpoxon Exp $

Advanced features
-------------------

1) Passing variables through to the config file variables

We have added the --var option to vw_auto.tcl to allow for user defined 
variables in the config file. The --var option takes 2 arguments a name
and a value.  This name can then be used in the config file.  For
example:

vw_auto.tcl -f my_cnofig.tcl --debug 3 --var my_channels "1 7"  --var my_sizes " 512 1024"

This would create 2 tcl lists my_channels and my_sizes which can be referenced
in your config file as follows:

keylset wireless_group_a Channel $my_channels
keylset unicast_latency FrameSizeList  $my_sizes

This would cause the unicast_latency test to run with the sizes passed 
in my_sizes (512 and 1024) in this case

In addition, the wireless_group_a would be configured to loop over the 
channels 1 and 7 in this example.

You may have  as many --var args as you wish each defining a new variable
to be referenced in the config file and it's associated value.

The values may either be singular such as :
--var my_sec WEP-Open-128
or they may be quoted multi-item lists such as:
 --var my_channels "4 5" --var my_sizes  "105 1036" 

There is one catch to all of this

If you are using the curly brace form of definitions in your config file,
you must break out the individual elements for which you wish to insert
variables in:

Thus if you have the following dut defined and wish to have the method and 
the channel be filed in by the varibles $my_channels and $my_sec you must 
break them out from the full definition as below.  This is because the 
curly braces in tcl prevent the evaluation of variables such as $my_sec 
and $my_channels.

set wireless_group_a {
    { GroupType         802.11abg                       }
    { BssidIndex        4                               }
    { Ssid              veriwave                        }
    { Dut               cisco-1232                      }
    { Method            { WEP-Open-40 WEP-Open-128 }    }
    { Channel           { 1 7 }                         }
    { NumClients        1                               }
    { Identity          anonymous                       }
    { Password          whatever                        }
    { AnonymousIdentity anonymous                       }
    { PskAscii          whatever                        }
    { WepKey40Hex       CAFEBABE01                      }
    { WepKey128Hex      BADC0FFEE123456789CAFEFEED      }
    { EnableValidateCertificate     off                 }
    { Dhcp              Enable          }
    { BaseIp            10.10.250.20    }
    { IncrIp            0.0.0.1         }
    { SubnetMask        255.255.0.0     }
    { Gateway           10.10.251.1     }
    { AssocRate         2               }
    { AssocTimeout      20              }
}

Here is how you would set this up:

set wireless_group_a {
    { GroupType         802.11abg                       }
    { BssidIndex        4                               }
    { Ssid              veriwave                        }
    { Dut               cisco-1232                      }
    { NumClients        1                               }
    { Identity          anonymous                       }
    { Password          whatever                        }
    { AnonymousIdentity anonymous                       }
    { PskAscii          whatever                        }
    { WepKey40Hex       CAFEBABE01                      }
    { WepKey128Hex      BADC0FFEE123456789CAFEFEED      }
    { EnableValidateCertificate     off                 }
    { Dhcp              Enable          }
    { BaseIp            10.10.250.20    }
    { IncrIp            0.0.0.1         }
    { SubnetMask        255.255.0.0     }
    { Gateway           10.10.251.1     }
    { AssocRate         2               }
    { AssocTimeout      20              }
}
keylset wireless_group_a Channel $my_channels
keylset wireless_group_a Method  $my_sec

This allows the channel and the security method to be set outside the
context of the curly braces which would prevent the substituion of the actual
values.  If you try and use the variable references inside a curly brace 
defintition as below:

**** NOT LIKE THIS *****

set wireless_group_a {
      ...
    { Channel           { $my_channels }  }
      ...
}

***********************

If you try and use the variable references inside a curly brace defintition 
as above in "NOT LIKE THIS" you will end up with the value of Channels being
the literal string $my_channels instead of the value {4 5}.

The following command line in conjunction with the var_example.tcl in the doc
directory is a working example that may give you a better feel for how to use 
this.  Search in var_example.tcl for the 3 variables $my_channels $my_sec 
and $my_sizes to see how they are used

vw_auto.tcl -f ../doc/var_example.tcl --debug 9 --var my_channels "4 5" --var my_sizes  "105 1036" --var my_sec WEP-Open-128


